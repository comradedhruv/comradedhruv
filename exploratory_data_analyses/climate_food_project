{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNLl4lMjbC9vBLGRaajRISS",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    },
    "accelerator": "TPU"
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/dvrachakonda/dhruv_varahvenkatasai_rachakondas_projects/blob/main/exploratory_data_analyses/climate_food_project\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#A Comprehesive Investigation on the Effects of Climate Change on Global Food Production\n",
        "\n",
        "By Dhruv Rachakonda\n"
      ],
      "metadata": {
        "id": "ghkURl_y5muj"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "#Introduction\n",
        "\n",
        "The following invesitgation serves to determine if the recent effects of climate change have an effect on the global food production.Â Id est, is the rising temperatures decresing, increasing, or having no effect on food production at all?\n",
        "\n",
        "Let us start off by importing the neccesary libaries"
      ],
      "metadata": {
        "id": "rjs1QKss5uqA"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import seaborn as sb\n",
        "import matplotlib.pyplot as plt\n",
        "from scipy import stats\n",
        "from scipy.stats import pearsonr # pearson correlation"
      ],
      "metadata": {
        "id": "8DcSCejyAD3C"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "#Reading in Data\n",
        "\n",
        "I am taking in data from the following databases:\n",
        "\n",
        "**Change in Average Climate Overtime**: https://www.ncdc.noaa.gov/cag/global/time-series\n",
        "\n",
        "**Global Meat Production**: https://ourworldindata.org/meat-production\n",
        "\n",
        "**Crop Yield Over Time**: https://data.nal.usda.gov/dataset/international-food-security/resource/45fda032-a799-480b-870b-e085e2378f1a#{view-graph:{graphOptions:{hooks:{processOffset:{},bindEvents:{}}}},graphOptions:{hooks:{processOffset:{},bindEvents:{}}}}\n"
      ],
      "metadata": {
        "id": "neaWe7rvlGxz"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Let us read in the data using the Pandas' .read_csv"
      ],
      "metadata": {
        "id": "izpOPsONpEKy"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "temperature = pd.read_csv(\"https://www.ncdc.noaa.gov/cag/global/time-series/globe/land_ocean/1/3/1880-2022/data.csv\")\n",
        "\n",
        "#had to upload to google drive to download - code to download CSV from drive\n",
        "!pip install -U -q PyDrive\n",
        "from pydrive.auth import GoogleAuth\n",
        "from pydrive.drive import GoogleDrive\n",
        "from google.colab import auth\n",
        "from oauth2client.client import GoogleCredentials\n",
        "# Authenticate and create the PyDrive client.\n",
        "auth.authenticate_user()\n",
        "gauth = GoogleAuth()\n",
        "gauth.credentials = GoogleCredentials.get_application_default()\n",
        "drive = GoogleDrive(gauth)\n",
        "link = 'https://drive.google.com/file/d/1lI4WoD3RTZhMCNDx-5BBDZaVRKwQP44T/view?usp=sharing' # The shareable link\n",
        "id = '1lI4WoD3RTZhMCNDx-5BBDZaVRKwQP44T' # After the /d/ and before the /view?\n",
        "downloaded = drive.CreateFile({'id':id})\n",
        "downloaded.GetContentFile('meat-production-tonnes')  # Put the name of the file here\n",
        "meat_produced = pd.read_csv('meat-production-tonnes') # and here\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "OO88XiVZpHOz"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "link = 'https://drive.google.com/file/d/1uUBkQVH1XRRCSC3mCckDQDuONTPYb5vC/view?usp=sharing' # The shareable link\n",
        "id = '1uUBkQVH1XRRCSC3mCckDQDuONTPYb5vC' # After the /d/ and before the /view?\n",
        "downloaded = drive.CreateFile({'id':id})\n",
        "downloaded.GetContentFile('DP_LIVE_19042022045530835.csv')  # Put the name of the file here\n",
        "crop_yield = pd.read_csv('DP_LIVE_19042022045530835.csv', encoding='latin-1') # and here"
      ],
      "metadata": {
        "id": "MWVo4ZXtysXJ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "#Checking Package\n",
        "\n",
        "Let us see how many rows of data we are working with, along with how many rows there are for each data set."
      ],
      "metadata": {
        "id": "wvpf7NLsuf5E"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "temperature.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8fUAxMVcvxR5",
        "outputId": "19df0954-8b0e-4288-a871-1778d5ce88be"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(147, 2)"
            ]
          },
          "metadata": {},
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "147 different columns with a value for each of them"
      ],
      "metadata": {
        "id": "-2jqi8BNv1NS"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "meat_produced.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "YKAF6p21v9KB",
        "outputId": "cfee025f-1103-4cbf-da40-311bd7a2a484"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(13561, 4)"
            ]
          },
          "metadata": {},
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "13,561 different columns and 4 values for them\n",
        "\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "OWn-euE7ydaL"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "crop_yield.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "VWfb87nWyg7P",
        "outputId": "cd91949d-5fdb-4350-ce6c-a2ba38e33234"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(18676, 8)"
            ]
          },
          "metadata": {},
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "90,488 different columns and 6 values for them\n"
      ],
      "metadata": {
        "id": "eAaUuzHkyQHM"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "#Examining Top and Bottom of Data"
      ],
      "metadata": {
        "id": "vJwKQLczzDSZ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "temperature.head(10)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 363
        },
        "id": "9oXccj45zKe5",
        "outputId": "055021e4-a8d9-435e-fbd4-21ca3a079806"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "  Global Land and Ocean Temperature Anomalies  March\n",
              "0                      Units: Degrees Celsius    NaN\n",
              "1                      Base Period: 1901-2000    NaN\n",
              "2                               Missing: -999    NaN\n",
              "3                                        Year  Value\n",
              "4                                        1880  -0.09\n",
              "5                                        1881   0.05\n",
              "6                                        1882   0.00\n",
              "7                                        1883  -0.18\n",
              "8                                        1884  -0.28\n",
              "9                                        1885  -0.25"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-a91875be-305c-4305-9b62-85656c6e3a48\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Global Land and Ocean Temperature Anomalies</th>\n",
              "      <th>March</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Units: Degrees Celsius</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Base Period: 1901-2000</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Missing: -999</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Year</td>\n",
              "      <td>Value</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1880</td>\n",
              "      <td>-0.09</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>1881</td>\n",
              "      <td>0.05</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>1882</td>\n",
              "      <td>0.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>1883</td>\n",
              "      <td>-0.18</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>1884</td>\n",
              "      <td>-0.28</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>1885</td>\n",
              "      <td>-0.25</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a91875be-305c-4305-9b62-85656c6e3a48')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-a91875be-305c-4305-9b62-85656c6e3a48 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-a91875be-305c-4305-9b62-85656c6e3a48');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "It looks like the description at the top of the dataset is being assumed as a data value. We'll deal with this in cleanup later"
      ],
      "metadata": {
        "id": "sn9JzIC7ziQE"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "temperature.tail(10)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 363
        },
        "id": "Gknrj8p8ziBm",
        "outputId": "dc380aa2-56e9-4a77-eb19-980d4f5e8750"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    Global Land and Ocean Temperature Anomalies  March\n",
              "137                                        2013   0.67\n",
              "138                                        2014   0.77\n",
              "139                                        2015   0.92\n",
              "140                                        2016   1.31\n",
              "141                                        2017   1.08\n",
              "142                                        2018   0.89\n",
              "143                                        2019   1.09\n",
              "144                                        2020   1.17\n",
              "145                                        2021   0.85\n",
              "146                                        2022   0.95"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-3c88a0e7-ec82-4e84-971d-62237b8629c7\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Global Land and Ocean Temperature Anomalies</th>\n",
              "      <th>March</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>137</th>\n",
              "      <td>2013</td>\n",
              "      <td>0.67</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>138</th>\n",
              "      <td>2014</td>\n",
              "      <td>0.77</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>139</th>\n",
              "      <td>2015</td>\n",
              "      <td>0.92</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>140</th>\n",
              "      <td>2016</td>\n",
              "      <td>1.31</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>141</th>\n",
              "      <td>2017</td>\n",
              "      <td>1.08</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>142</th>\n",
              "      <td>2018</td>\n",
              "      <td>0.89</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>143</th>\n",
              "      <td>2019</td>\n",
              "      <td>1.09</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>144</th>\n",
              "      <td>2020</td>\n",
              "      <td>1.17</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>145</th>\n",
              "      <td>2021</td>\n",
              "      <td>0.85</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>146</th>\n",
              "      <td>2022</td>\n",
              "      <td>0.95</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3c88a0e7-ec82-4e84-971d-62237b8629c7')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-3c88a0e7-ec82-4e84-971d-62237b8629c7 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-3c88a0e7-ec82-4e84-971d-62237b8629c7');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Let's do meat production over time now"
      ],
      "metadata": {
        "id": "fHi7V95y0dnc"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "meat_produced.head(60)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "Pjr2zjTwz9Ye",
        "outputId": "be87ec7e-f65b-4b5e-b641-063b657239d5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "         Entity Code  Year  \\\n",
              "0   Afghanistan  AFG  1961   \n",
              "1   Afghanistan  AFG  1962   \n",
              "2   Afghanistan  AFG  1963   \n",
              "3   Afghanistan  AFG  1964   \n",
              "4   Afghanistan  AFG  1965   \n",
              "5   Afghanistan  AFG  1966   \n",
              "6   Afghanistan  AFG  1967   \n",
              "7   Afghanistan  AFG  1968   \n",
              "8   Afghanistan  AFG  1969   \n",
              "9   Afghanistan  AFG  1970   \n",
              "10  Afghanistan  AFG  1971   \n",
              "11  Afghanistan  AFG  1972   \n",
              "12  Afghanistan  AFG  1973   \n",
              "13  Afghanistan  AFG  1974   \n",
              "14  Afghanistan  AFG  1975   \n",
              "15  Afghanistan  AFG  1976   \n",
              "16  Afghanistan  AFG  1977   \n",
              "17  Afghanistan  AFG  1978   \n",
              "18  Afghanistan  AFG  1979   \n",
              "19  Afghanistan  AFG  1980   \n",
              "20  Afghanistan  AFG  1981   \n",
              "21  Afghanistan  AFG  1982   \n",
              "22  Afghanistan  AFG  1983   \n",
              "23  Afghanistan  AFG  1984   \n",
              "24  Afghanistan  AFG  1985   \n",
              "25  Afghanistan  AFG  1986   \n",
              "26  Afghanistan  AFG  1987   \n",
              "27  Afghanistan  AFG  1988   \n",
              "28  Afghanistan  AFG  1989   \n",
              "29  Afghanistan  AFG  1990   \n",
              "30  Afghanistan  AFG  1991   \n",
              "31  Afghanistan  AFG  1992   \n",
              "32  Afghanistan  AFG  1993   \n",
              "33  Afghanistan  AFG  1994   \n",
              "34  Afghanistan  AFG  1995   \n",
              "35  Afghanistan  AFG  1996   \n",
              "36  Afghanistan  AFG  1997   \n",
              "37  Afghanistan  AFG  1998   \n",
              "38  Afghanistan  AFG  1999   \n",
              "39  Afghanistan  AFG  2000   \n",
              "40  Afghanistan  AFG  2001   \n",
              "41  Afghanistan  AFG  2002   \n",
              "42  Afghanistan  AFG  2003   \n",
              "43  Afghanistan  AFG  2004   \n",
              "44  Afghanistan  AFG  2005   \n",
              "45  Afghanistan  AFG  2006   \n",
              "46  Afghanistan  AFG  2007   \n",
              "47  Afghanistan  AFG  2008   \n",
              "48  Afghanistan  AFG  2009   \n",
              "49  Afghanistan  AFG  2010   \n",
              "50  Afghanistan  AFG  2011   \n",
              "51  Afghanistan  AFG  2012   \n",
              "52  Afghanistan  AFG  2013   \n",
              "53  Afghanistan  AFG  2014   \n",
              "54  Afghanistan  AFG  2015   \n",
              "55  Afghanistan  AFG  2016   \n",
              "56  Afghanistan  AFG  2017   \n",
              "57  Afghanistan  AFG  2018   \n",
              "58       Africa  NaN  1961   \n",
              "59       Africa  NaN  1962   \n",
              "\n",
              "    Livestock Primary - Meat, Total - 1765 - Production - 5510 - tonnes  \n",
              "0                                              129420                    \n",
              "1                                              132206                    \n",
              "2                                              138971                    \n",
              "3                                              143830                    \n",
              "4                                              150195                    \n",
              "5                                              175210                    \n",
              "6                                              184232                    \n",
              "7                                              201632                    \n",
              "8                                              202232                    \n",
              "9                                              189120                    \n",
              "10                                             191268                    \n",
              "11                                             170956                    \n",
              "12                                             185106                    \n",
              "13                                             191306                    \n",
              "14                                             197928                    \n",
              "15                                             222428                    \n",
              "16                                             228988                    \n",
              "17                                             234460                    \n",
              "18                                             234718                    \n",
              "19                                             238810                    \n",
              "20                                             245770                    \n",
              "21                                             248550                    \n",
              "22                                             237481                    \n",
              "23                                             225941                    \n",
              "24                                             208920                    \n",
              "25                                             194840                    \n",
              "26                                             204440                    \n",
              "27                                             213540                    \n",
              "28                                             221560                    \n",
              "29                                             255032                    \n",
              "30                                             247045                    \n",
              "31                                             242563                    \n",
              "32                                             251821                    \n",
              "33                                             270378                    \n",
              "34                                             287096                    \n",
              "35                                             312194                    \n",
              "36                                             341132                    \n",
              "37                                             371850                    \n",
              "38                                             366988                    \n",
              "39                                             320785                    \n",
              "40                                             278743                    \n",
              "41                                             304321                    \n",
              "42                                             298619                    \n",
              "43                                             322977                    \n",
              "44                                             318615                    \n",
              "45                                             272400                    \n",
              "46                                             267240                    \n",
              "47                                             294060                    \n",
              "48                                             304340                    \n",
              "49                                             328160                    \n",
              "50                                             335664                    \n",
              "51                                             330600                    \n",
              "52                                             322110                    \n",
              "53                                             322783                    \n",
              "54                                             325669                    \n",
              "55                                             323671                    \n",
              "56                                             325692                    \n",
              "57                                             330636                    \n",
              "58                                            3910553                    \n",
              "59                                            3958199                    "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-de4d1ce5-7718-47b9-a5eb-b2e5aa5adcd7\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Entity</th>\n",
              "      <th>Code</th>\n",
              "      <th>Year</th>\n",
              "      <th>Livestock Primary - Meat, Total - 1765 - Production - 5510 - tonnes</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Afghanistan</td>\n",
              "      <td>AFG</td>\n",
              "      <td>1961</td>\n",
              "      <td>129420</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Afghanistan</td>\n",
              "      <td>AFG</td>\n",
              "      <td>1962</td>\n",
              "      <td>132206</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Afghanistan</td>\n",
              "      <td>AFG</td>\n",
              "      <td>1963</td>\n",
              "      <td>138971</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Afghanistan</td>\n",
              "      <td>AFG</td>\n",
              "      <td>1964</td>\n",
              "      <td>143830</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Afghanistan</td>\n",
              "      <td>AFG</td>\n",
              "      <td>1965</td>\n",
              "      <td>150195</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>Afghanistan</td>\n",
              "      <td>AFG</td>\n",
              "      <td>1966</td>\n",
              "      <td>175210</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>Afghanistan</td>\n",
              "      <td>AFG</td>\n",
              "      <td>1967</td>\n",
              "      <td>184232</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>Afghanistan</td>\n",
              "      <td>AFG</td>\n",
              "      <td>1968</td>\n",
              "      <td>201632</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>Afghanistan</td>\n",
              "      <td>AFG</td>\n",
              "      <td>1969</td>\n",
              "      <td>202232</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>Afghanistan</td>\n",
              "      <td>AFG</td>\n",
              "      <td>1970</td>\n",
              "      <td>189120</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>Afghanistan</td>\n",
              "      <td>AFG</td>\n",
              "      <td>1971</td>\n",
              "      <td>191268</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>Afghanistan</td>\n",
              "      <td>AFG</td>\n",
              "      <td>1972</td>\n",
              "      <td>170956</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>Afghanistan</td>\n",
              "      <td>AFG</td>\n",
              "      <td>1973</td>\n",
              "      <td>185106</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>Afghanistan</td>\n",
              "      <td>AFG</td>\n",
              "      <td>1974</td>\n",
              "      <td>191306</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>Afghanistan</td>\n",
              "      <td>AFG</td>\n",
              "      <td>1975</td>\n",
              "      <td>197928</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15</th>\n",
              "      <td>Afghanistan</td>\n",
              "      <td>AFG</td>\n",
              "      <td>1976</td>\n",
              "      <td>222428</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16</th>\n",
              "      <td>Afghanistan</td>\n",
              "      <td>AFG</td>\n",
              "      <td>1977</td>\n",
              "      <td>228988</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17</th>\n",
              "      <td>Afghanistan</td>\n",
              "      <td>AFG</td>\n",
              "      <td>1978</td>\n",
              "      <td>234460</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18</th>\n",
              "      <td>Afghanistan</td>\n",
              "      <td>AFG</td>\n",
              "      <td>1979</td>\n",
              "      <td>234718</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19</th>\n",
              "      <td>Afghanistan</td>\n",
              "      <td>AFG</td>\n",
              "      <td>1980</td>\n",
              "      <td>238810</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>20</th>\n",
              "      <td>Afghanistan</td>\n",
              "      <td>AFG</td>\n",
              "      <td>1981</td>\n",
              "      <td>245770</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21</th>\n",
              "      <td>Afghanistan</td>\n",
              "      <td>AFG</td>\n",
              "      <td>1982</td>\n",
              "      <td>248550</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>22</th>\n",
              "      <td>Afghanistan</td>\n",
              "      <td>AFG</td>\n",
              "      <td>1983</td>\n",
              "      <td>237481</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>23</th>\n",
              "      <td>Afghanistan</td>\n",
              "      <td>AFG</td>\n",
              "      <td>1984</td>\n",
              "      <td>225941</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>24</th>\n",
              "      <td>Afghanistan</td>\n",
              "      <td>AFG</td>\n",
              "      <td>1985</td>\n",
              "      <td>208920</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25</th>\n",
              "      <td>Afghanistan</td>\n",
              "      <td>AFG</td>\n",
              "      <td>1986</td>\n",
              "      <td>194840</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>26</th>\n",
              "      <td>Afghanistan</td>\n",
              "      <td>AFG</td>\n",
              "      <td>1987</td>\n",
              "      <td>204440</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>27</th>\n",
              "      <td>Afghanistan</td>\n",
              "      <td>AFG</td>\n",
              "      <td>1988</td>\n",
              "      <td>213540</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>28</th>\n",
              "      <td>Afghanistan</td>\n",
              "      <td>AFG</td>\n",
              "      <td>1989</td>\n",
              "      <td>221560</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>29</th>\n",
              "      <td>Afghanistan</td>\n",
              "      <td>AFG</td>\n",
              "      <td>1990</td>\n",
              "      <td>255032</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>30</th>\n",
              "      <td>Afghanistan</td>\n",
              "      <td>AFG</td>\n",
              "      <td>1991</td>\n",
              "      <td>247045</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>31</th>\n",
              "      <td>Afghanistan</td>\n",
              "      <td>AFG</td>\n",
              "      <td>1992</td>\n",
              "      <td>242563</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>32</th>\n",
              "      <td>Afghanistan</td>\n",
              "      <td>AFG</td>\n",
              "      <td>1993</td>\n",
              "      <td>251821</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>33</th>\n",
              "      <td>Afghanistan</td>\n",
              "      <td>AFG</td>\n",
              "      <td>1994</td>\n",
              "      <td>270378</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>34</th>\n",
              "      <td>Afghanistan</td>\n",
              "      <td>AFG</td>\n",
              "      <td>1995</td>\n",
              "      <td>287096</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>35</th>\n",
              "      <td>Afghanistan</td>\n",
              "      <td>AFG</td>\n",
              "      <td>1996</td>\n",
              "      <td>312194</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>36</th>\n",
              "      <td>Afghanistan</td>\n",
              "      <td>AFG</td>\n",
              "      <td>1997</td>\n",
              "      <td>341132</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>37</th>\n",
              "      <td>Afghanistan</td>\n",
              "      <td>AFG</td>\n",
              "      <td>1998</td>\n",
              "      <td>371850</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>38</th>\n",
              "      <td>Afghanistan</td>\n",
              "      <td>AFG</td>\n",
              "      <td>1999</td>\n",
              "      <td>366988</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>39</th>\n",
              "      <td>Afghanistan</td>\n",
              "      <td>AFG</td>\n",
              "      <td>2000</td>\n",
              "      <td>320785</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>40</th>\n",
              "      <td>Afghanistan</td>\n",
              "      <td>AFG</td>\n",
              "      <td>2001</td>\n",
              "      <td>278743</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>41</th>\n",
              "      <td>Afghanistan</td>\n",
              "      <td>AFG</td>\n",
              "      <td>2002</td>\n",
              "      <td>304321</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>42</th>\n",
              "      <td>Afghanistan</td>\n",
              "      <td>AFG</td>\n",
              "      <td>2003</td>\n",
              "      <td>298619</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>43</th>\n",
              "      <td>Afghanistan</td>\n",
              "      <td>AFG</td>\n",
              "      <td>2004</td>\n",
              "      <td>322977</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>44</th>\n",
              "      <td>Afghanistan</td>\n",
              "      <td>AFG</td>\n",
              "      <td>2005</td>\n",
              "      <td>318615</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>45</th>\n",
              "      <td>Afghanistan</td>\n",
              "      <td>AFG</td>\n",
              "      <td>2006</td>\n",
              "      <td>272400</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>46</th>\n",
              "      <td>Afghanistan</td>\n",
              "      <td>AFG</td>\n",
              "      <td>2007</td>\n",
              "      <td>267240</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>47</th>\n",
              "      <td>Afghanistan</td>\n",
              "      <td>AFG</td>\n",
              "      <td>2008</td>\n",
              "      <td>294060</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>48</th>\n",
              "      <td>Afghanistan</td>\n",
              "      <td>AFG</td>\n",
              "      <td>2009</td>\n",
              "      <td>304340</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>49</th>\n",
              "      <td>Afghanistan</td>\n",
              "      <td>AFG</td>\n",
              "      <td>2010</td>\n",
              "      <td>328160</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50</th>\n",
              "      <td>Afghanistan</td>\n",
              "      <td>AFG</td>\n",
              "      <td>2011</td>\n",
              "      <td>335664</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>51</th>\n",
              "      <td>Afghanistan</td>\n",
              "      <td>AFG</td>\n",
              "      <td>2012</td>\n",
              "      <td>330600</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>52</th>\n",
              "      <td>Afghanistan</td>\n",
              "      <td>AFG</td>\n",
              "      <td>2013</td>\n",
              "      <td>322110</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>53</th>\n",
              "      <td>Afghanistan</td>\n",
              "      <td>AFG</td>\n",
              "      <td>2014</td>\n",
              "      <td>322783</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>54</th>\n",
              "      <td>Afghanistan</td>\n",
              "      <td>AFG</td>\n",
              "      <td>2015</td>\n",
              "      <td>325669</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>55</th>\n",
              "      <td>Afghanistan</td>\n",
              "      <td>AFG</td>\n",
              "      <td>2016</td>\n",
              "      <td>323671</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>56</th>\n",
              "      <td>Afghanistan</td>\n",
              "      <td>AFG</td>\n",
              "      <td>2017</td>\n",
              "      <td>325692</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>57</th>\n",
              "      <td>Afghanistan</td>\n",
              "      <td>AFG</td>\n",
              "      <td>2018</td>\n",
              "      <td>330636</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>58</th>\n",
              "      <td>Africa</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1961</td>\n",
              "      <td>3910553</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>59</th>\n",
              "      <td>Africa</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1962</td>\n",
              "      <td>3958199</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-de4d1ce5-7718-47b9-a5eb-b2e5aa5adcd7')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-de4d1ce5-7718-47b9-a5eb-b2e5aa5adcd7 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-de4d1ce5-7718-47b9-a5eb-b2e5aa5adcd7');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "meat_produced.tail()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "xsV42hhO0C4e",
        "outputId": "ad020e62-ea2d-45af-f740-70a54b8fe98b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "         Entity Code  Year  \\\n",
              "13556  Zimbabwe  ZWE  2014   \n",
              "13557  Zimbabwe  ZWE  2015   \n",
              "13558  Zimbabwe  ZWE  2016   \n",
              "13559  Zimbabwe  ZWE  2017   \n",
              "13560  Zimbabwe  ZWE  2018   \n",
              "\n",
              "       Livestock Primary - Meat, Total - 1765 - Production - 5510 - tonnes  \n",
              "13556                                             237360                    \n",
              "13557                                             254512                    \n",
              "13558                                             255174                    \n",
              "13559                                             257797                    \n",
              "13560                                             259091                    "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-02ffd861-bc9e-40f0-8828-091b1a9fd14e\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Entity</th>\n",
              "      <th>Code</th>\n",
              "      <th>Year</th>\n",
              "      <th>Livestock Primary - Meat, Total - 1765 - Production - 5510 - tonnes</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>13556</th>\n",
              "      <td>Zimbabwe</td>\n",
              "      <td>ZWE</td>\n",
              "      <td>2014</td>\n",
              "      <td>237360</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13557</th>\n",
              "      <td>Zimbabwe</td>\n",
              "      <td>ZWE</td>\n",
              "      <td>2015</td>\n",
              "      <td>254512</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13558</th>\n",
              "      <td>Zimbabwe</td>\n",
              "      <td>ZWE</td>\n",
              "      <td>2016</td>\n",
              "      <td>255174</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13559</th>\n",
              "      <td>Zimbabwe</td>\n",
              "      <td>ZWE</td>\n",
              "      <td>2017</td>\n",
              "      <td>257797</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13560</th>\n",
              "      <td>Zimbabwe</td>\n",
              "      <td>ZWE</td>\n",
              "      <td>2018</td>\n",
              "      <td>259091</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-02ffd861-bc9e-40f0-8828-091b1a9fd14e')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-02ffd861-bc9e-40f0-8828-091b1a9fd14e button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-02ffd861-bc9e-40f0-8828-091b1a9fd14e');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 12
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "We can see how this file is formatted. Each country has an individual value for every year from 1961 to 2018. This will be helpful when we deal with a regression plot later on.\n",
        "\n",
        "Let us do crop yield now."
      ],
      "metadata": {
        "id": "-LXAlo6U0K9B"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "crop_yield.head(50)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "Lbux7Mu_0r8F",
        "outputId": "33a72104-8ada-4733-c293-39bf11e41957"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Ã¯Â»Â¿\"LOCATION\"  INDICATOR SUBJECT   MEASURE FREQUENCY  TIME   Value  \\\n",
              "0            AUS  CROPYIELD    RICE  TONNE_HA         A  1990   8.315   \n",
              "1            AUS  CROPYIELD    RICE  TONNE_HA         A  1991   8.395   \n",
              "2            AUS  CROPYIELD    RICE  TONNE_HA         A  1992   8.094   \n",
              "3            AUS  CROPYIELD    RICE  TONNE_HA         A  1993   8.336   \n",
              "4            AUS  CROPYIELD    RICE  TONNE_HA         A  1994   8.538   \n",
              "5            AUS  CROPYIELD    RICE  TONNE_HA         A  1995   7.051   \n",
              "6            AUS  CROPYIELD    RICE  TONNE_HA         A  1996   8.257   \n",
              "7            AUS  CROPYIELD    RICE  TONNE_HA         A  1997   9.007   \n",
              "8            AUS  CROPYIELD    RICE  TONNE_HA         A  1998   9.203   \n",
              "9            AUS  CROPYIELD    RICE  TONNE_HA         A  1999   8.275   \n",
              "10           AUS  CROPYIELD    RICE  TONNE_HA         A  2000   9.283   \n",
              "11           AUS  CROPYIELD    RICE  TONNE_HA         A  2001   8.278   \n",
              "12           AUS  CROPYIELD    RICE  TONNE_HA         A  2002   9.319   \n",
              "13           AUS  CROPYIELD    RICE  TONNE_HA         A  2003   8.379   \n",
              "14           AUS  CROPYIELD    RICE  TONNE_HA         A  2004   6.647   \n",
              "15           AUS  CROPYIELD    RICE  TONNE_HA         A  2005   9.833   \n",
              "16           AUS  CROPYIELD    RICE  TONNE_HA         A  2006   8.150   \n",
              "17           AUS  CROPYIELD    RICE  TONNE_HA         A  2007   8.501   \n",
              "18           AUS  CROPYIELD    RICE  TONNE_HA         A  2008   8.461   \n",
              "19           AUS  CROPYIELD    RICE  TONNE_HA         A  2009  10.390   \n",
              "20           AUS  CROPYIELD    RICE  TONNE_HA         A  2010   9.544   \n",
              "21           AUS  CROPYIELD    RICE  TONNE_HA         A  2011   8.910   \n",
              "22           AUS  CROPYIELD    RICE  TONNE_HA         A  2012  10.275   \n",
              "23           AUS  CROPYIELD    RICE  TONNE_HA         A  2013  10.939   \n",
              "24           AUS  CROPYIELD    RICE  TONNE_HA         A  2014   9.910   \n",
              "25           AUS  CROPYIELD    RICE  TONNE_HA         A  2015  10.306   \n",
              "26           AUS  CROPYIELD    RICE  TONNE_HA         A  2016   9.821   \n",
              "27           AUS  CROPYIELD    RICE  TONNE_HA         A  2017  10.386   \n",
              "28           AUS  CROPYIELD    RICE  TONNE_HA         A  2018   8.771   \n",
              "29           AUS  CROPYIELD    RICE  TONNE_HA         A  2019   9.574   \n",
              "30           AUS  CROPYIELD    RICE  TONNE_HA         A  2020   8.305   \n",
              "31           AUS  CROPYIELD    RICE  TONNE_HA         A  2021   8.388   \n",
              "32           AUS  CROPYIELD    RICE  TONNE_HA         A  2022   8.471   \n",
              "33           AUS  CROPYIELD    RICE  TONNE_HA         A  2023   8.557   \n",
              "34           AUS  CROPYIELD    RICE  TONNE_HA         A  2024   8.642   \n",
              "35           AUS  CROPYIELD    RICE  TONNE_HA         A  2025   8.729   \n",
              "36           AUS  CROPYIELD    RICE  TONNE_HA         A  2026   8.816   \n",
              "37           AUS  CROPYIELD    RICE  TONNE_HA         A  2027   8.905   \n",
              "38           AUS  CROPYIELD    RICE  TONNE_HA         A  2028   8.994   \n",
              "39           AUS  CROPYIELD    RICE  TONNE_HA         A  2029   9.084   \n",
              "40           AUS  CROPYIELD    RICE  TONNE_HA         A  2030   9.175   \n",
              "41           AUS  CROPYIELD   WHEAT  TONNE_HA         A  1990   1.634   \n",
              "42           AUS  CROPYIELD   WHEAT  TONNE_HA         A  1991   1.470   \n",
              "43           AUS  CROPYIELD   WHEAT  TONNE_HA         A  1992   1.781   \n",
              "44           AUS  CROPYIELD   WHEAT  TONNE_HA         A  1993   1.966   \n",
              "45           AUS  CROPYIELD   WHEAT  TONNE_HA         A  1994   1.136   \n",
              "46           AUS  CROPYIELD   WHEAT  TONNE_HA         A  1995   1.790   \n",
              "47           AUS  CROPYIELD   WHEAT  TONNE_HA         A  1996   2.096   \n",
              "48           AUS  CROPYIELD   WHEAT  TONNE_HA         A  1997   1.842   \n",
              "49           AUS  CROPYIELD   WHEAT  TONNE_HA         A  1998   1.860   \n",
              "\n",
              "    Flag Codes  \n",
              "0          NaN  \n",
              "1          NaN  \n",
              "2          NaN  \n",
              "3          NaN  \n",
              "4          NaN  \n",
              "5          NaN  \n",
              "6          NaN  \n",
              "7          NaN  \n",
              "8          NaN  \n",
              "9          NaN  \n",
              "10         NaN  \n",
              "11         NaN  \n",
              "12         NaN  \n",
              "13         NaN  \n",
              "14         NaN  \n",
              "15         NaN  \n",
              "16         NaN  \n",
              "17         NaN  \n",
              "18         NaN  \n",
              "19         NaN  \n",
              "20         NaN  \n",
              "21         NaN  \n",
              "22         NaN  \n",
              "23         NaN  \n",
              "24         NaN  \n",
              "25         NaN  \n",
              "26         NaN  \n",
              "27         NaN  \n",
              "28         NaN  \n",
              "29         NaN  \n",
              "30         NaN  \n",
              "31         NaN  \n",
              "32         NaN  \n",
              "33         NaN  \n",
              "34         NaN  \n",
              "35         NaN  \n",
              "36         NaN  \n",
              "37         NaN  \n",
              "38         NaN  \n",
              "39         NaN  \n",
              "40         NaN  \n",
              "41         NaN  \n",
              "42         NaN  \n",
              "43         NaN  \n",
              "44         NaN  \n",
              "45         NaN  \n",
              "46         NaN  \n",
              "47         NaN  \n",
              "48         NaN  \n",
              "49         NaN  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-7fad9945-6780-4d9a-96db-70f7f366a460\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Ã¯Â»Â¿\"LOCATION\"</th>\n",
              "      <th>INDICATOR</th>\n",
              "      <th>SUBJECT</th>\n",
              "      <th>MEASURE</th>\n",
              "      <th>FREQUENCY</th>\n",
              "      <th>TIME</th>\n",
              "      <th>Value</th>\n",
              "      <th>Flag Codes</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>AUS</td>\n",
              "      <td>CROPYIELD</td>\n",
              "      <td>RICE</td>\n",
              "      <td>TONNE_HA</td>\n",
              "      <td>A</td>\n",
              "      <td>1990</td>\n",
              "      <td>8.315</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>AUS</td>\n",
              "      <td>CROPYIELD</td>\n",
              "      <td>RICE</td>\n",
              "      <td>TONNE_HA</td>\n",
              "      <td>A</td>\n",
              "      <td>1991</td>\n",
              "      <td>8.395</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>AUS</td>\n",
              "      <td>CROPYIELD</td>\n",
              "      <td>RICE</td>\n",
              "      <td>TONNE_HA</td>\n",
              "      <td>A</td>\n",
              "      <td>1992</td>\n",
              "      <td>8.094</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>AUS</td>\n",
              "      <td>CROPYIELD</td>\n",
              "      <td>RICE</td>\n",
              "      <td>TONNE_HA</td>\n",
              "      <td>A</td>\n",
              "      <td>1993</td>\n",
              "      <td>8.336</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>AUS</td>\n",
              "      <td>CROPYIELD</td>\n",
              "      <td>RICE</td>\n",
              "      <td>TONNE_HA</td>\n",
              "      <td>A</td>\n",
              "      <td>1994</td>\n",
              "      <td>8.538</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>AUS</td>\n",
              "      <td>CROPYIELD</td>\n",
              "      <td>RICE</td>\n",
              "      <td>TONNE_HA</td>\n",
              "      <td>A</td>\n",
              "      <td>1995</td>\n",
              "      <td>7.051</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>AUS</td>\n",
              "      <td>CROPYIELD</td>\n",
              "      <td>RICE</td>\n",
              "      <td>TONNE_HA</td>\n",
              "      <td>A</td>\n",
              "      <td>1996</td>\n",
              "      <td>8.257</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>AUS</td>\n",
              "      <td>CROPYIELD</td>\n",
              "      <td>RICE</td>\n",
              "      <td>TONNE_HA</td>\n",
              "      <td>A</td>\n",
              "      <td>1997</td>\n",
              "      <td>9.007</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>AUS</td>\n",
              "      <td>CROPYIELD</td>\n",
              "      <td>RICE</td>\n",
              "      <td>TONNE_HA</td>\n",
              "      <td>A</td>\n",
              "      <td>1998</td>\n",
              "      <td>9.203</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>AUS</td>\n",
              "      <td>CROPYIELD</td>\n",
              "      <td>RICE</td>\n",
              "      <td>TONNE_HA</td>\n",
              "      <td>A</td>\n",
              "      <td>1999</td>\n",
              "      <td>8.275</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>AUS</td>\n",
              "      <td>CROPYIELD</td>\n",
              "      <td>RICE</td>\n",
              "      <td>TONNE_HA</td>\n",
              "      <td>A</td>\n",
              "      <td>2000</td>\n",
              "      <td>9.283</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>AUS</td>\n",
              "      <td>CROPYIELD</td>\n",
              "      <td>RICE</td>\n",
              "      <td>TONNE_HA</td>\n",
              "      <td>A</td>\n",
              "      <td>2001</td>\n",
              "      <td>8.278</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>AUS</td>\n",
              "      <td>CROPYIELD</td>\n",
              "      <td>RICE</td>\n",
              "      <td>TONNE_HA</td>\n",
              "      <td>A</td>\n",
              "      <td>2002</td>\n",
              "      <td>9.319</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>AUS</td>\n",
              "      <td>CROPYIELD</td>\n",
              "      <td>RICE</td>\n",
              "      <td>TONNE_HA</td>\n",
              "      <td>A</td>\n",
              "      <td>2003</td>\n",
              "      <td>8.379</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>AUS</td>\n",
              "      <td>CROPYIELD</td>\n",
              "      <td>RICE</td>\n",
              "      <td>TONNE_HA</td>\n",
              "      <td>A</td>\n",
              "      <td>2004</td>\n",
              "      <td>6.647</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15</th>\n",
              "      <td>AUS</td>\n",
              "      <td>CROPYIELD</td>\n",
              "      <td>RICE</td>\n",
              "      <td>TONNE_HA</td>\n",
              "      <td>A</td>\n",
              "      <td>2005</td>\n",
              "      <td>9.833</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16</th>\n",
              "      <td>AUS</td>\n",
              "      <td>CROPYIELD</td>\n",
              "      <td>RICE</td>\n",
              "      <td>TONNE_HA</td>\n",
              "      <td>A</td>\n",
              "      <td>2006</td>\n",
              "      <td>8.150</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17</th>\n",
              "      <td>AUS</td>\n",
              "      <td>CROPYIELD</td>\n",
              "      <td>RICE</td>\n",
              "      <td>TONNE_HA</td>\n",
              "      <td>A</td>\n",
              "      <td>2007</td>\n",
              "      <td>8.501</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18</th>\n",
              "      <td>AUS</td>\n",
              "      <td>CROPYIELD</td>\n",
              "      <td>RICE</td>\n",
              "      <td>TONNE_HA</td>\n",
              "      <td>A</td>\n",
              "      <td>2008</td>\n",
              "      <td>8.461</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19</th>\n",
              "      <td>AUS</td>\n",
              "      <td>CROPYIELD</td>\n",
              "      <td>RICE</td>\n",
              "      <td>TONNE_HA</td>\n",
              "      <td>A</td>\n",
              "      <td>2009</td>\n",
              "      <td>10.390</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>20</th>\n",
              "      <td>AUS</td>\n",
              "      <td>CROPYIELD</td>\n",
              "      <td>RICE</td>\n",
              "      <td>TONNE_HA</td>\n",
              "      <td>A</td>\n",
              "      <td>2010</td>\n",
              "      <td>9.544</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21</th>\n",
              "      <td>AUS</td>\n",
              "      <td>CROPYIELD</td>\n",
              "      <td>RICE</td>\n",
              "      <td>TONNE_HA</td>\n",
              "      <td>A</td>\n",
              "      <td>2011</td>\n",
              "      <td>8.910</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>22</th>\n",
              "      <td>AUS</td>\n",
              "      <td>CROPYIELD</td>\n",
              "      <td>RICE</td>\n",
              "      <td>TONNE_HA</td>\n",
              "      <td>A</td>\n",
              "      <td>2012</td>\n",
              "      <td>10.275</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>23</th>\n",
              "      <td>AUS</td>\n",
              "      <td>CROPYIELD</td>\n",
              "      <td>RICE</td>\n",
              "      <td>TONNE_HA</td>\n",
              "      <td>A</td>\n",
              "      <td>2013</td>\n",
              "      <td>10.939</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>24</th>\n",
              "      <td>AUS</td>\n",
              "      <td>CROPYIELD</td>\n",
              "      <td>RICE</td>\n",
              "      <td>TONNE_HA</td>\n",
              "      <td>A</td>\n",
              "      <td>2014</td>\n",
              "      <td>9.910</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25</th>\n",
              "      <td>AUS</td>\n",
              "      <td>CROPYIELD</td>\n",
              "      <td>RICE</td>\n",
              "      <td>TONNE_HA</td>\n",
              "      <td>A</td>\n",
              "      <td>2015</td>\n",
              "      <td>10.306</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>26</th>\n",
              "      <td>AUS</td>\n",
              "      <td>CROPYIELD</td>\n",
              "      <td>RICE</td>\n",
              "      <td>TONNE_HA</td>\n",
              "      <td>A</td>\n",
              "      <td>2016</td>\n",
              "      <td>9.821</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>27</th>\n",
              "      <td>AUS</td>\n",
              "      <td>CROPYIELD</td>\n",
              "      <td>RICE</td>\n",
              "      <td>TONNE_HA</td>\n",
              "      <td>A</td>\n",
              "      <td>2017</td>\n",
              "      <td>10.386</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>28</th>\n",
              "      <td>AUS</td>\n",
              "      <td>CROPYIELD</td>\n",
              "      <td>RICE</td>\n",
              "      <td>TONNE_HA</td>\n",
              "      <td>A</td>\n",
              "      <td>2018</td>\n",
              "      <td>8.771</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>29</th>\n",
              "      <td>AUS</td>\n",
              "      <td>CROPYIELD</td>\n",
              "      <td>RICE</td>\n",
              "      <td>TONNE_HA</td>\n",
              "      <td>A</td>\n",
              "      <td>2019</td>\n",
              "      <td>9.574</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>30</th>\n",
              "      <td>AUS</td>\n",
              "      <td>CROPYIELD</td>\n",
              "      <td>RICE</td>\n",
              "      <td>TONNE_HA</td>\n",
              "      <td>A</td>\n",
              "      <td>2020</td>\n",
              "      <td>8.305</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>31</th>\n",
              "      <td>AUS</td>\n",
              "      <td>CROPYIELD</td>\n",
              "      <td>RICE</td>\n",
              "      <td>TONNE_HA</td>\n",
              "      <td>A</td>\n",
              "      <td>2021</td>\n",
              "      <td>8.388</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>32</th>\n",
              "      <td>AUS</td>\n",
              "      <td>CROPYIELD</td>\n",
              "      <td>RICE</td>\n",
              "      <td>TONNE_HA</td>\n",
              "      <td>A</td>\n",
              "      <td>2022</td>\n",
              "      <td>8.471</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>33</th>\n",
              "      <td>AUS</td>\n",
              "      <td>CROPYIELD</td>\n",
              "      <td>RICE</td>\n",
              "      <td>TONNE_HA</td>\n",
              "      <td>A</td>\n",
              "      <td>2023</td>\n",
              "      <td>8.557</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>34</th>\n",
              "      <td>AUS</td>\n",
              "      <td>CROPYIELD</td>\n",
              "      <td>RICE</td>\n",
              "      <td>TONNE_HA</td>\n",
              "      <td>A</td>\n",
              "      <td>2024</td>\n",
              "      <td>8.642</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>35</th>\n",
              "      <td>AUS</td>\n",
              "      <td>CROPYIELD</td>\n",
              "      <td>RICE</td>\n",
              "      <td>TONNE_HA</td>\n",
              "      <td>A</td>\n",
              "      <td>2025</td>\n",
              "      <td>8.729</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>36</th>\n",
              "      <td>AUS</td>\n",
              "      <td>CROPYIELD</td>\n",
              "      <td>RICE</td>\n",
              "      <td>TONNE_HA</td>\n",
              "      <td>A</td>\n",
              "      <td>2026</td>\n",
              "      <td>8.816</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>37</th>\n",
              "      <td>AUS</td>\n",
              "      <td>CROPYIELD</td>\n",
              "      <td>RICE</td>\n",
              "      <td>TONNE_HA</td>\n",
              "      <td>A</td>\n",
              "      <td>2027</td>\n",
              "      <td>8.905</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>38</th>\n",
              "      <td>AUS</td>\n",
              "      <td>CROPYIELD</td>\n",
              "      <td>RICE</td>\n",
              "      <td>TONNE_HA</td>\n",
              "      <td>A</td>\n",
              "      <td>2028</td>\n",
              "      <td>8.994</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>39</th>\n",
              "      <td>AUS</td>\n",
              "      <td>CROPYIELD</td>\n",
              "      <td>RICE</td>\n",
              "      <td>TONNE_HA</td>\n",
              "      <td>A</td>\n",
              "      <td>2029</td>\n",
              "      <td>9.084</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>40</th>\n",
              "      <td>AUS</td>\n",
              "      <td>CROPYIELD</td>\n",
              "      <td>RICE</td>\n",
              "      <td>TONNE_HA</td>\n",
              "      <td>A</td>\n",
              "      <td>2030</td>\n",
              "      <td>9.175</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>41</th>\n",
              "      <td>AUS</td>\n",
              "      <td>CROPYIELD</td>\n",
              "      <td>WHEAT</td>\n",
              "      <td>TONNE_HA</td>\n",
              "      <td>A</td>\n",
              "      <td>1990</td>\n",
              "      <td>1.634</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>42</th>\n",
              "      <td>AUS</td>\n",
              "      <td>CROPYIELD</td>\n",
              "      <td>WHEAT</td>\n",
              "      <td>TONNE_HA</td>\n",
              "      <td>A</td>\n",
              "      <td>1991</td>\n",
              "      <td>1.470</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>43</th>\n",
              "      <td>AUS</td>\n",
              "      <td>CROPYIELD</td>\n",
              "      <td>WHEAT</td>\n",
              "      <td>TONNE_HA</td>\n",
              "      <td>A</td>\n",
              "      <td>1992</td>\n",
              "      <td>1.781</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>44</th>\n",
              "      <td>AUS</td>\n",
              "      <td>CROPYIELD</td>\n",
              "      <td>WHEAT</td>\n",
              "      <td>TONNE_HA</td>\n",
              "      <td>A</td>\n",
              "      <td>1993</td>\n",
              "      <td>1.966</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>45</th>\n",
              "      <td>AUS</td>\n",
              "      <td>CROPYIELD</td>\n",
              "      <td>WHEAT</td>\n",
              "      <td>TONNE_HA</td>\n",
              "      <td>A</td>\n",
              "      <td>1994</td>\n",
              "      <td>1.136</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>46</th>\n",
              "      <td>AUS</td>\n",
              "      <td>CROPYIELD</td>\n",
              "      <td>WHEAT</td>\n",
              "      <td>TONNE_HA</td>\n",
              "      <td>A</td>\n",
              "      <td>1995</td>\n",
              "      <td>1.790</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>47</th>\n",
              "      <td>AUS</td>\n",
              "      <td>CROPYIELD</td>\n",
              "      <td>WHEAT</td>\n",
              "      <td>TONNE_HA</td>\n",
              "      <td>A</td>\n",
              "      <td>1996</td>\n",
              "      <td>2.096</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>48</th>\n",
              "      <td>AUS</td>\n",
              "      <td>CROPYIELD</td>\n",
              "      <td>WHEAT</td>\n",
              "      <td>TONNE_HA</td>\n",
              "      <td>A</td>\n",
              "      <td>1997</td>\n",
              "      <td>1.842</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>49</th>\n",
              "      <td>AUS</td>\n",
              "      <td>CROPYIELD</td>\n",
              "      <td>WHEAT</td>\n",
              "      <td>TONNE_HA</td>\n",
              "      <td>A</td>\n",
              "      <td>1998</td>\n",
              "      <td>1.860</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7fad9945-6780-4d9a-96db-70f7f366a460')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-7fad9945-6780-4d9a-96db-70f7f366a460 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-7fad9945-6780-4d9a-96db-70f7f366a460');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 13
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "crop_yield.tail()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "YGhKo4UR0urZ",
        "outputId": "21df6ccb-4ddb-4228-ed97-ecb8eaaecffa"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      Ã¯Â»Â¿\"LOCATION\"  INDICATOR  SUBJECT  MEASURE FREQUENCY  TIME  Value  \\\n",
              "18671           GBR  CROPYIELD  SOYBEAN  THND_HA         A  2026    0.0   \n",
              "18672           GBR  CROPYIELD  SOYBEAN  THND_HA         A  2027    0.0   \n",
              "18673           GBR  CROPYIELD  SOYBEAN  THND_HA         A  2028    0.0   \n",
              "18674           GBR  CROPYIELD  SOYBEAN  THND_HA         A  2029    0.0   \n",
              "18675           GBR  CROPYIELD  SOYBEAN  THND_HA         A  2030    0.0   \n",
              "\n",
              "       Flag Codes  \n",
              "18671         NaN  \n",
              "18672         NaN  \n",
              "18673         NaN  \n",
              "18674         NaN  \n",
              "18675         NaN  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-d91615f6-57ad-4b83-bd50-d51770e31330\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Ã¯Â»Â¿\"LOCATION\"</th>\n",
              "      <th>INDICATOR</th>\n",
              "      <th>SUBJECT</th>\n",
              "      <th>MEASURE</th>\n",
              "      <th>FREQUENCY</th>\n",
              "      <th>TIME</th>\n",
              "      <th>Value</th>\n",
              "      <th>Flag Codes</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>18671</th>\n",
              "      <td>GBR</td>\n",
              "      <td>CROPYIELD</td>\n",
              "      <td>SOYBEAN</td>\n",
              "      <td>THND_HA</td>\n",
              "      <td>A</td>\n",
              "      <td>2026</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18672</th>\n",
              "      <td>GBR</td>\n",
              "      <td>CROPYIELD</td>\n",
              "      <td>SOYBEAN</td>\n",
              "      <td>THND_HA</td>\n",
              "      <td>A</td>\n",
              "      <td>2027</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18673</th>\n",
              "      <td>GBR</td>\n",
              "      <td>CROPYIELD</td>\n",
              "      <td>SOYBEAN</td>\n",
              "      <td>THND_HA</td>\n",
              "      <td>A</td>\n",
              "      <td>2028</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18674</th>\n",
              "      <td>GBR</td>\n",
              "      <td>CROPYIELD</td>\n",
              "      <td>SOYBEAN</td>\n",
              "      <td>THND_HA</td>\n",
              "      <td>A</td>\n",
              "      <td>2029</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18675</th>\n",
              "      <td>GBR</td>\n",
              "      <td>CROPYIELD</td>\n",
              "      <td>SOYBEAN</td>\n",
              "      <td>THND_HA</td>\n",
              "      <td>A</td>\n",
              "      <td>2030</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d91615f6-57ad-4b83-bd50-d51770e31330')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-d91615f6-57ad-4b83-bd50-d51770e31330 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-d91615f6-57ad-4b83-bd50-d51770e31330');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 14
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "I only want to use rice and wheat, since those are the most commoonly grown values here. We can also see the range is from 1990 to 2030 (predicted), which is out of our temperature range. We'll have to clean up accordingly."
      ],
      "metadata": {
        "id": "WuzXivqc5z4D"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "#Checking N's\n",
        "\n",
        "We have to assess our time ranges here. The weather data goes from 1877 to 2022. The meat production time series goes from 1961 to 2018, and the crop yield, being the most restrictive range, goes from 1990 to 2030.\n",
        "\n",
        "We wlll have to cut the ranges of time when we are examining any data set alongside the crop yield dataset to match the same range of time as the dataset of the crop yield."
      ],
      "metadata": {
        "id": "268GaZIs6LCh"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "#Validation Against External Data Source\n",
        "\n",
        "For the crop yield data set, if we seee wheat yield for 1996 for Austraila is 23.6 million tons, which is a similar value in the dataset according to this link.\n",
        "\n",
        "https://www.abs.gov.au/AUSSTATS/abs@.nsf/mediareleasesbyReleaseDate/34A4346909241F39CA2568A90013622C?OpenDocument\n",
        "\n",
        "For the meat data set, the following source says that 312,000 tons of meat produced in the year of 2020, which matches the value in our table of 330636 for year 2018. This closeness in years and value validates the accuracy of this dataset.\n",
        "\n",
        "https://knoema.com/atlas/Afghanistan/topics/Agriculture/Live-Stock-Production-Production-Quantity/Total-production-of-meat\n",
        "\n",
        "For the global warming data set, this following source shows that the climate rising, which makes sense for our data set, which mostly has positive values for change in average global temperature.\n",
        "\n",
        "\n",
        "https://www.climate.gov/news-features/understanding-climate/climate-change-global-temperature#:~:text=April%2020%2C%202022-,Highlights,land%20areas%20were%20record%20warm.\n",
        "\n"
      ],
      "metadata": {
        "id": "72q7Ho0S_1to"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "#Formatting/Cleaning Data"
      ],
      "metadata": {
        "id": "cHv155vsH_U0"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "temperature.head()"
      ],
      "metadata": {
        "id": "AOgfywL6Z2Pp",
        "outputId": "9c71e693-44e6-45b7-b738-4d21761d91a1",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        }
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "  Global Land and Ocean Temperature Anomalies  March\n",
              "0                      Units: Degrees Celsius    NaN\n",
              "1                      Base Period: 1901-2000    NaN\n",
              "2                               Missing: -999    NaN\n",
              "3                                        Year  Value\n",
              "4                                        1880  -0.09"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-1561f536-d52e-4cff-9543-7371f4567927\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Global Land and Ocean Temperature Anomalies</th>\n",
              "      <th>March</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Units: Degrees Celsius</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Base Period: 1901-2000</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Missing: -999</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Year</td>\n",
              "      <td>Value</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1880</td>\n",
              "      <td>-0.09</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1561f536-d52e-4cff-9543-7371f4567927')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-1561f536-d52e-4cff-9543-7371f4567927 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-1561f536-d52e-4cff-9543-7371f4567927');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "The first thing to do here is to drop the values that are just a description for the temperature data set. We need to drop the first four columns in this case."
      ],
      "metadata": {
        "id": "bf1xcEzPLQvL"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "temperature = temperature.iloc[1: , :]\n",
        "temperature = temperature.iloc[1: , :]\n",
        "temperature = temperature.iloc[1: , :]\n",
        "temperature = temperature.iloc[1: , :]\n",
        "\n"
      ],
      "metadata": {
        "id": "33VQoO5N_yjR"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "temperature.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "DOEHmmn5gCJo",
        "outputId": "40e27f29-46ab-4d0c-b111-a90ee4f76981"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "  Global Land and Ocean Temperature Anomalies  March\n",
              "4                                        1880  -0.09\n",
              "5                                        1881   0.05\n",
              "6                                        1882   0.00\n",
              "7                                        1883  -0.18\n",
              "8                                        1884  -0.28"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-89e11352-3790-4e00-9e2b-395441ffa772\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Global Land and Ocean Temperature Anomalies</th>\n",
              "      <th>March</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1880</td>\n",
              "      <td>-0.09</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>1881</td>\n",
              "      <td>0.05</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>1882</td>\n",
              "      <td>0.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>1883</td>\n",
              "      <td>-0.18</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>1884</td>\n",
              "      <td>-0.28</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-89e11352-3790-4e00-9e2b-395441ffa772')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-89e11352-3790-4e00-9e2b-395441ffa772 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-89e11352-3790-4e00-9e2b-395441ffa772');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 16
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "We can also rename the axes for organization sake, and reset the general index from starting at 4 to starting at 0."
      ],
      "metadata": {
        "id": "P35af0UlhX7k"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "temperature.rename(columns = {'Global Land and Ocean Temperature Anomalies':'Year', ' March':'Value'}, inplace = True)\n",
        "temperature = temperature.reset_index()\n",
        "temperature.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "9IPIlwi1LzFK",
        "outputId": "17cf377b-46bf-425e-d70b-5717caf91d06"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   index  Year  Value\n",
              "0      4  1880  -0.09\n",
              "1      5  1881   0.05\n",
              "2      6  1882   0.00\n",
              "3      7  1883  -0.18\n",
              "4      8  1884  -0.28"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-38c3da01-2396-426e-be9b-d79790633e79\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>index</th>\n",
              "      <th>Year</th>\n",
              "      <th>Value</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>4</td>\n",
              "      <td>1880</td>\n",
              "      <td>-0.09</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>5</td>\n",
              "      <td>1881</td>\n",
              "      <td>0.05</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>6</td>\n",
              "      <td>1882</td>\n",
              "      <td>0.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>7</td>\n",
              "      <td>1883</td>\n",
              "      <td>-0.18</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>8</td>\n",
              "      <td>1884</td>\n",
              "      <td>-0.28</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-38c3da01-2396-426e-be9b-d79790633e79')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-38c3da01-2396-426e-be9b-d79790633e79 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-38c3da01-2396-426e-be9b-d79790633e79');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 17
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "temperature = temperature.drop(['index'], axis=1)\n",
        "temperature.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "dEUJFpCggKpz",
        "outputId": "65375882-c68b-4894-d982-de30e0843299"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Year  Value\n",
              "0  1880  -0.09\n",
              "1  1881   0.05\n",
              "2  1882   0.00\n",
              "3  1883  -0.18\n",
              "4  1884  -0.28"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-1210fb95-dc05-4c1c-9a9a-0f51d3a2f97c\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Year</th>\n",
              "      <th>Value</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1880</td>\n",
              "      <td>-0.09</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1881</td>\n",
              "      <td>0.05</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1882</td>\n",
              "      <td>0.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1883</td>\n",
              "      <td>-0.18</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1884</td>\n",
              "      <td>-0.28</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1210fb95-dc05-4c1c-9a9a-0f51d3a2f97c')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-1210fb95-dc05-4c1c-9a9a-0f51d3a2f97c button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-1210fb95-dc05-4c1c-9a9a-0f51d3a2f97c');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 18
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "I also noticed that there are a bunch of \"countries\" in the data sets that are not actually countires. Some of these non-existant countries include \"WLD\" or world values and various alliances such as BRICS, EU, NATO and many more.\n",
        "\n",
        "We need to drop these values."
      ],
      "metadata": {
        "id": "fDnR7aK5MMbi"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "In the meat production dataset, all countries use the three letter code with the exception of the Soviet Union before 1991. Otherwise, values like Western Europe and European Union do not have three letter codes for country.\n",
        "\n",
        "I am going to loop through every row. If code is null, I will drop that row."
      ],
      "metadata": {
        "id": "VkA8KzygNDKx"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "meat_produced.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "eMTBRQy3dpXr",
        "outputId": "580da214-f61e-4cac-eb6b-13d35ea4867a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "        Entity Code  Year  \\\n",
              "0  Afghanistan  AFG  1961   \n",
              "1  Afghanistan  AFG  1962   \n",
              "2  Afghanistan  AFG  1963   \n",
              "3  Afghanistan  AFG  1964   \n",
              "4  Afghanistan  AFG  1965   \n",
              "\n",
              "   Livestock Primary - Meat, Total - 1765 - Production - 5510 - tonnes  \n",
              "0                                             129420                    \n",
              "1                                             132206                    \n",
              "2                                             138971                    \n",
              "3                                             143830                    \n",
              "4                                             150195                    "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-ed66502d-c0e7-48cc-a4c8-f5433f6ae364\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Entity</th>\n",
              "      <th>Code</th>\n",
              "      <th>Year</th>\n",
              "      <th>Livestock Primary - Meat, Total - 1765 - Production - 5510 - tonnes</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Afghanistan</td>\n",
              "      <td>AFG</td>\n",
              "      <td>1961</td>\n",
              "      <td>129420</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Afghanistan</td>\n",
              "      <td>AFG</td>\n",
              "      <td>1962</td>\n",
              "      <td>132206</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Afghanistan</td>\n",
              "      <td>AFG</td>\n",
              "      <td>1963</td>\n",
              "      <td>138971</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Afghanistan</td>\n",
              "      <td>AFG</td>\n",
              "      <td>1964</td>\n",
              "      <td>143830</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Afghanistan</td>\n",
              "      <td>AFG</td>\n",
              "      <td>1965</td>\n",
              "      <td>150195</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ed66502d-c0e7-48cc-a4c8-f5433f6ae364')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-ed66502d-c0e7-48cc-a4c8-f5433f6ae364 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-ed66502d-c0e7-48cc-a4c8-f5433f6ae364');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 19
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dropped_meat = meat_produced.dropna(subset = ['Code'])\n",
        "print(\"There are {0:,} rows of data after dropping, compared to {1:,} before.\".format(len(dropped_meat),\n",
        "                                                                                     len(meat_produced)))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "plbkcY7diQ5H",
        "outputId": "1771584e-5c4b-49a5-8001-7eb90ca2e391"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "There are 11,642 rows of data after dropping, compared to 13,561 before.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "meat_produced = dropped_meat"
      ],
      "metadata": {
        "id": "jx4le2FKnITh"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "This data set also includes Melanesia, which is not a country. It is a region. However, it has a code for its region. Same with overall world. We're dropping both of these."
      ],
      "metadata": {
        "id": "cQrqFgQGmV3X"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "dropped_meat = meat_produced[meat_produced.Entity != \"Melanesia\"]\n",
        "\n",
        "print(\"There are {0:,} rows of data after dropping, compared to {1:,} before.\".format(len(dropped_meat),\n",
        "                                                                                     len(meat_produced)))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "fMi_Bu1Zn8KO",
        "outputId": "0604b6ea-2c86-4738-a770-a2e4a6c456ca"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "There are 11,584 rows of data after dropping, compared to 11,642 before.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "meat_produced = dropped_meat"
      ],
      "metadata": {
        "id": "MsaafA2mfhAX"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "dropped_meat = meat_produced[meat_produced.Entity != \"World\"]\n",
        "print(\"There are {0:,} rows of data after dropping, compared to {1:,} before.\".format(len(dropped_meat),\n",
        "                                                                                     len(meat_produced)))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "IKjw9bQwfYJK",
        "outputId": "d8a0e08c-4723-4cd4-908a-90b00ff966aa"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "There are 11,526 rows of data after dropping, compared to 11,584 before.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "meat_produced = dropped_meat"
      ],
      "metadata": {
        "id": "f2GAWFZjtFw1"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "len(meat_produced.index)"
      ],
      "metadata": {
        "id": "hH_Ijlorebhs",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "8bfb8785-ed90-4cde-a671-9881cd4caa45"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "11526"
            ]
          },
          "metadata": {},
          "execution_count": 26
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "meat_produced.sort_values(by=['Livestock Primary - Meat, Total - 1765 - Production - 5510 - tonnes'])\n"
      ],
      "metadata": {
        "id": "dH0LSlpOgSzp",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "outputId": "ba8a01ea-b8ca-4b9a-b5b0-1c7d500063d8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                          Entity Code  Year  \\\n",
              "10221  Saint Pierre and Miquelon  SPM  2010   \n",
              "10217  Saint Pierre and Miquelon  SPM  2006   \n",
              "10218  Saint Pierre and Miquelon  SPM  2007   \n",
              "10226  Saint Pierre and Miquelon  SPM  2015   \n",
              "10222  Saint Pierre and Miquelon  SPM  2011   \n",
              "...                          ...  ...   ...   \n",
              "2452                       China  CHN  2016   \n",
              "2451                       China  CHN  2015   \n",
              "2450                       China  CHN  2014   \n",
              "2454                       China  CHN  2018   \n",
              "2453                       China  CHN  2017   \n",
              "\n",
              "       Livestock Primary - Meat, Total - 1765 - Production - 5510 - tonnes  \n",
              "10221                                                  2                    \n",
              "10217                                                  2                    \n",
              "10218                                                  2                    \n",
              "10226                                                  2                    \n",
              "10222                                                  2                    \n",
              "...                                                  ...                    \n",
              "2452                                            86779163                    \n",
              "2451                                            87650879                    \n",
              "2450                                            88010996                    \n",
              "2454                                            88156383                    \n",
              "2453                                            88419530                    \n",
              "\n",
              "[11526 rows x 4 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-1c97581d-7a13-46b1-bff4-7d5af6ec504a\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Entity</th>\n",
              "      <th>Code</th>\n",
              "      <th>Year</th>\n",
              "      <th>Livestock Primary - Meat, Total - 1765 - Production - 5510 - tonnes</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>10221</th>\n",
              "      <td>Saint Pierre and Miquelon</td>\n",
              "      <td>SPM</td>\n",
              "      <td>2010</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10217</th>\n",
              "      <td>Saint Pierre and Miquelon</td>\n",
              "      <td>SPM</td>\n",
              "      <td>2006</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10218</th>\n",
              "      <td>Saint Pierre and Miquelon</td>\n",
              "      <td>SPM</td>\n",
              "      <td>2007</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10226</th>\n",
              "      <td>Saint Pierre and Miquelon</td>\n",
              "      <td>SPM</td>\n",
              "      <td>2015</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10222</th>\n",
              "      <td>Saint Pierre and Miquelon</td>\n",
              "      <td>SPM</td>\n",
              "      <td>2011</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2452</th>\n",
              "      <td>China</td>\n",
              "      <td>CHN</td>\n",
              "      <td>2016</td>\n",
              "      <td>86779163</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2451</th>\n",
              "      <td>China</td>\n",
              "      <td>CHN</td>\n",
              "      <td>2015</td>\n",
              "      <td>87650879</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2450</th>\n",
              "      <td>China</td>\n",
              "      <td>CHN</td>\n",
              "      <td>2014</td>\n",
              "      <td>88010996</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2454</th>\n",
              "      <td>China</td>\n",
              "      <td>CHN</td>\n",
              "      <td>2018</td>\n",
              "      <td>88156383</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2453</th>\n",
              "      <td>China</td>\n",
              "      <td>CHN</td>\n",
              "      <td>2017</td>\n",
              "      <td>88419530</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>11526 rows Ã 4 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1c97581d-7a13-46b1-bff4-7d5af6ec504a')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-1c97581d-7a13-46b1-bff4-7d5af6ec504a button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-1c97581d-7a13-46b1-bff4-7d5af6ec504a');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 27
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "The world is no longer there, since the largest amount of meat is produced by an actual country now."
      ],
      "metadata": {
        "id": "uJlvLwbngjoZ"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "The change in numbers indicates values were succesfully dropped"
      ],
      "metadata": {
        "id": "hKIUnL2Mop_i"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Now onto crop yield, the crop yield's country column can be renamed to something more cleaner looking"
      ],
      "metadata": {
        "id": "03ewtp-pt4M7"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "crop_yield.rename(columns = {'Ã¯Â»Â¿\"LOCATION\"':'COUNTRY'}, inplace = True)\n",
        "crop_yield.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "r-zUxKo5t8tO",
        "outputId": "484e6ae4-adb7-4057-f873-1d3f7a19ac27"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "  COUNTRY  INDICATOR SUBJECT   MEASURE FREQUENCY  TIME  Value  Flag Codes\n",
              "0     AUS  CROPYIELD    RICE  TONNE_HA         A  1990  8.315         NaN\n",
              "1     AUS  CROPYIELD    RICE  TONNE_HA         A  1991  8.395         NaN\n",
              "2     AUS  CROPYIELD    RICE  TONNE_HA         A  1992  8.094         NaN\n",
              "3     AUS  CROPYIELD    RICE  TONNE_HA         A  1993  8.336         NaN\n",
              "4     AUS  CROPYIELD    RICE  TONNE_HA         A  1994  8.538         NaN"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-851fb62e-8f88-4f45-a6df-6a5aef5e4791\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>COUNTRY</th>\n",
              "      <th>INDICATOR</th>\n",
              "      <th>SUBJECT</th>\n",
              "      <th>MEASURE</th>\n",
              "      <th>FREQUENCY</th>\n",
              "      <th>TIME</th>\n",
              "      <th>Value</th>\n",
              "      <th>Flag Codes</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>AUS</td>\n",
              "      <td>CROPYIELD</td>\n",
              "      <td>RICE</td>\n",
              "      <td>TONNE_HA</td>\n",
              "      <td>A</td>\n",
              "      <td>1990</td>\n",
              "      <td>8.315</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>AUS</td>\n",
              "      <td>CROPYIELD</td>\n",
              "      <td>RICE</td>\n",
              "      <td>TONNE_HA</td>\n",
              "      <td>A</td>\n",
              "      <td>1991</td>\n",
              "      <td>8.395</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>AUS</td>\n",
              "      <td>CROPYIELD</td>\n",
              "      <td>RICE</td>\n",
              "      <td>TONNE_HA</td>\n",
              "      <td>A</td>\n",
              "      <td>1992</td>\n",
              "      <td>8.094</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>AUS</td>\n",
              "      <td>CROPYIELD</td>\n",
              "      <td>RICE</td>\n",
              "      <td>TONNE_HA</td>\n",
              "      <td>A</td>\n",
              "      <td>1993</td>\n",
              "      <td>8.336</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>AUS</td>\n",
              "      <td>CROPYIELD</td>\n",
              "      <td>RICE</td>\n",
              "      <td>TONNE_HA</td>\n",
              "      <td>A</td>\n",
              "      <td>1994</td>\n",
              "      <td>8.538</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-851fb62e-8f88-4f45-a6df-6a5aef5e4791')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-851fb62e-8f88-4f45-a6df-6a5aef5e4791 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-851fb62e-8f88-4f45-a6df-6a5aef5e4791');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 28
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "The crop yield dataset also has values for world, OECD and BRICS. We can drop these values."
      ],
      "metadata": {
        "id": "45wGZA-NsEpo"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "dropped_crops = crop_yield[crop_yield.COUNTRY != \"WLD\"]\n",
        "dropped_crops = crop_yield[crop_yield.COUNTRY != \"BRICS\"]\n",
        "dropped_crops = crop_yield[crop_yield.COUNTRY != \"OECD\"]\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "hxR0fSnGtJ-h"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"There are {0:,} rows of data after dropping, compared to {1:,} before.\".format(len(dropped_crops),\n",
        "                                                                                     len(crop_yield)))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Sad1LS0mum8U",
        "outputId": "586c735c-8dc2-441d-9f93-252029e67e41"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "There are 18,184 rows of data after dropping, compared to 18,676 before.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "crop_yield = dropped_crops"
      ],
      "metadata": {
        "id": "VLocFOgEyzoS"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Change in number indicates that values were in fact changed."
      ],
      "metadata": {
        "id": "fvd3--QOup92"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "The datset also has measurements for both tons of crops produced and the area of land that it took up. I'm going to just go with the weight, since thats what the meat data set uses. We'll drop any values that use hectres instead of tonnes."
      ],
      "metadata": {
        "id": "-1XHgo8NvFDl"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "dropped_crops = crop_yield[crop_yield.MEASURE != \"THND_HA\"]\n",
        "\n",
        "print(\"There are {0:,} rows of data after dropping, compared to {1:,} before.\".format(len(dropped_crops),\n",
        "                                                                                     len(crop_yield)))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "KO8zcYwuvPvg",
        "outputId": "171d9480-da19-4e6d-998e-9f666adad436"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "There are 12,116 rows of data after dropping, compared to 18,184 before.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "crop_yield = dropped_crops"
      ],
      "metadata": {
        "id": "vXX4nBMwv1gV"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "We also want to get rid of tons/hectare\n",
        "TONNE_HA"
      ],
      "metadata": {
        "id": "HKyY55oVvqjd"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "dropped_crops = crop_yield[crop_yield.MEASURE != \"TONNE_HA\"]\n",
        "\n",
        "print(\"There are {0:,} rows of data after dropping, compared to {1:,} before.\".format(len(dropped_crops),\n",
        "                                                                                     len(crop_yield)))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "njcHbzscvobm",
        "outputId": "607a36a6-9dad-418a-8f1c-cd7db9a3ec19"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "There are 6,068 rows of data after dropping, compared to 12,116 before.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "crop_yield = dropped_crops"
      ],
      "metadata": {
        "id": "lxjVFBJ8y3lC"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Lastly, Wheat and Rice are the only crops in this data set that are grown in every country. The two crops, Maize and Soybeans, are not grown in every country. We should as such drop maize and soybeans"
      ],
      "metadata": {
        "id": "wod5ftYNwxo9"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "dropped_crops = crop_yield[(crop_yield.SUBJECT != \"SOYBEAN\")]\n",
        "\n",
        "print(\"There are {0:,} rows of data after dropping, compared to {1:,} before.\".format(len(dropped_crops),\n",
        "                                                                                     len(crop_yield)))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "29U_RwUsxoDF",
        "outputId": "26ba918d-a9e1-4bc2-84d5-ca28c933ffab"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "There are 4,551 rows of data after dropping, compared to 6,068 before.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "crop_yield = dropped_crops"
      ],
      "metadata": {
        "id": "6qyZgSwpyiig"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "dropped_crops = crop_yield[(crop_yield.SUBJECT != \"MAIZE\")]\n",
        "\n",
        "print(\"There are {0:,} rows of data after dropping, compared to {1:,} before.\".format(len(dropped_crops),\n",
        "                                                                                     len(crop_yield)))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "wNmniPoZyh7S",
        "outputId": "b73dadc3-be44-40a6-84e2-7420b2aa894e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "There are 3,034 rows of data after dropping, compared to 4,551 before.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "crop_yield = dropped_crops"
      ],
      "metadata": {
        "id": "0c9D_B5eqk82"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "The loss percentage here is 83.75%, which is a little bit sad. However, I consider 3034 samples a significantly large dataset, so I am quite satified"
      ],
      "metadata": {
        "id": "vPYfA2m7y-zu"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "#Visual Analysis\n",
        "\n",
        "I intent to use a scatter plot for all of the datasets. Let us start with simply graphing the change in temperature over time.\n",
        "\n",
        "Let me start off by converting the types of the year to int and the types of the temperature deviation to double"
      ],
      "metadata": {
        "id": "FJoMHbB62kK4"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "temperature[\"Year\"]= temperature[\"Year\"].astype(str)\n",
        "temperature[\"Year\"]= temperature[\"Year\"].astype(int)\n",
        "\n",
        "\n",
        "temperature[\"Value\"]= temperature[\"Value\"].astype(str)\n",
        "temperature[\"Value\"]= temperature[\"Value\"].astype(float)"
      ],
      "metadata": {
        "id": "EAFVmjgq57_v"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "sb.set(rc = {'figure.figsize':(25,10)})\n",
        "p = sb.scatterplot(data = temperature, x = \"Year\", y = \"Value\")\n",
        "p.set_xlabel(\"Year\", fontsize = 20)\n",
        "p.set_ylabel(\"Deviation from Average Temperature\", fontsize = 20)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 635
        },
        "id": "19bhsixv4HXm",
        "outputId": "196004fa-da16-46a4-d5f4-c5b5a12865e0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0, 0.5, 'Deviation from Average Temperature')"
            ]
          },
          "metadata": {},
          "execution_count": 41
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1800x720 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Let us now plot the scatter plot for tons of meat produced per year"
      ],
      "metadata": {
        "id": "ZkD2pc_g8tev"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "meat_produced[\"Year\"]= meat_produced[\"Year\"].astype(str)\n",
        "meat_produced[\"Year\"]= meat_produced[\"Year\"].astype(int)\n",
        "\n",
        "\n",
        "meat_produced[\"Livestock Primary - Meat, Total - 1765 - Production - 5510 - tonnes\"]= meat_produced[\"Livestock Primary - Meat, Total - 1765 - Production - 5510 - tonnes\"].astype(str)\n",
        "meat_produced[\"Livestock Primary - Meat, Total - 1765 - Production - 5510 - tonnes\"]= meat_produced[\"Livestock Primary - Meat, Total - 1765 - Production - 5510 - tonnes\"].astype(float)\n",
        "\n"
      ],
      "metadata": {
        "id": "WpCbKmXr9Jdt"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "meat_produced.rename(columns = {\"Livestock Primary - Meat, Total - 1765 - Production - 5510 - tonnes\":'Tonnes of Meat Produced by Given Country'}, inplace = True)"
      ],
      "metadata": {
        "id": "58ePDphC-_7P"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "sb.set(rc = {'figure.figsize':(25,10)})\n",
        "p = sb.scatterplot(data = meat_produced, x = \"Year\", y ='Tonnes of Meat Produced by Given Country')\n",
        "p.set_xlabel(\"Year\", fontsize = 20)\n",
        "p.set_ylabel(\"Tonnes of Meat Produced by Given Country\", fontsize = 20)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 646
        },
        "id": "vHysq-dp-CKx",
        "outputId": "845e11dc-2323-4b57-beee-97b339fd6f83"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0, 0.5, 'Tonnes of Meat Produced by Given Country')"
            ]
          },
          "metadata": {},
          "execution_count": 44
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1800x720 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "This looks a little hard to read, let's use a line plot instead"
      ],
      "metadata": {
        "id": "7IA5LcBViV2u"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "sb.set(rc = {'figure.figsize':(25,10)})\n",
        "p = sb.lineplot(data = meat_produced, x = \"Year\", y ='Tonnes of Meat Produced by Given Country')\n",
        "p.set_xlabel(\"Year\", fontsize = 20)\n",
        "p.set_ylabel(\"Tonnes of Meat Produced by Given Country\", fontsize = 20)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 646
        },
        "id": "5Ua5KozWiYT_",
        "outputId": "e67cffdd-9bea-438f-aa49-f704a698d476"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0, 0.5, 'Tonnes of Meat Produced by Given Country')"
            ]
          },
          "metadata": {},
          "execution_count": 45
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1800x720 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Lastly, let's see the general trend in crop production by year for each year."
      ],
      "metadata": {
        "id": "PFPtL1HcjN4S"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "sb.set(rc = {'figure.figsize':(25,10)})\n",
        "p = sb.scatterplot(data=crop_yield, x=\"TIME\", y=\"Value\", hue=\"SUBJECT\")\n",
        "p.set_xlabel(\"Year\", fontsize = 20)\n",
        "p.set_ylabel(\"Tonnes of Crop Produced by Given Country\", fontsize = 20)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 635
        },
        "id": "bqaZFWOLl3pW",
        "outputId": "e94eef4d-fc53-4e62-fee6-70d079df9023"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0, 0.5, 'Tonnes of Crop Produced by Given Country')"
            ]
          },
          "metadata": {},
          "execution_count": 46
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1800x720 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "This also looks really hard to read. Let's once again use a line plot instead"
      ],
      "metadata": {
        "id": "kleWaK2qrCvj"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "sb.set(rc = {'figure.figsize':(25,10)})\n",
        "p = sb.lineplot(data=crop_yield, x=\"TIME\", y=\"Value\", hue=\"SUBJECT\")\n",
        "p.set_xlabel(\"Year\", fontsize = 20)\n",
        "p.set_ylabel(\"Tonnes of Crop Produced by Given Country\", fontsize = 20)\n",
        "from matplotlib.pyplot import figure\n",
        "plt.legend(labels=[\"Rice\",\"Wheat\"], title = \"Crop\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 635
        },
        "id": "wwKUtChcrHZ1",
        "outputId": "cbba1489-ffff-4d1c-a6be-c79e422f889c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.legend.Legend at 0x7fcc50270110>"
            ]
          },
          "metadata": {},
          "execution_count": 47
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1800x720 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "All three datasets have a generally upwards trend, some more than others. We will do some investigation on the correlations, however it appears that there is a correlation between the rising global temperature and the global food prodcution for meat and grain yield."
      ],
      "metadata": {
        "id": "KmMqSwufvWTW"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "#Analysis and Solution"
      ],
      "metadata": {
        "id": "GJEp2M9a6nBZ"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "I'm going to insert a regression line on each scatter plot. We can then see the general trend that is going on."
      ],
      "metadata": {
        "id": "CbCNOPsU7G6P"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "sb.set(rc = {'figure.figsize':(25,10)})\n",
        "p = sb.regplot(data = temperature, x = \"Year\", y = \"Value\")\n",
        "p.set_xlabel(\"Year\", fontsize = 20)\n",
        "p.set_ylabel(\"Deviation from Average Temperature\", fontsize = 20)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 635
        },
        "id": "-YQw_IUu7eMb",
        "outputId": "23a73aed-98c2-4c88-a550-aac0aa6e97af"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0, 0.5, 'Deviation from Average Temperature')"
            ]
          },
          "metadata": {},
          "execution_count": 48
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1800x720 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "This is a clear upward trend not only in the global temperature, but the CHANGE in global temperature. This is the derivative function of overall global temperature. Since this is represented by a clear straight line, if we take the integral of a linear function, it will result in a quadratic function with quadratic growth, which goes to show the alarming rate at which global temperature is rising."
      ],
      "metadata": {
        "id": "klWcJmPx7t4D"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "sb.set(rc = {'figure.figsize':(25,10)})\n",
        "p = sb.regplot(data = meat_produced, x = \"Year\", y ='Tonnes of Meat Produced by Given Country')\n",
        "p.set_xlabel(\"Year\", fontsize = 20)\n",
        "p.set_ylabel(\"Tonnes of Meat Produced by Given Country\", fontsize = 20)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 646
        },
        "id": "7wpPavq995-g",
        "outputId": "65ea015e-46e6-490f-f990-703dad4932b7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0, 0.5, 'Tonnes of Meat Produced by Given Country')"
            ]
          },
          "metadata": {},
          "execution_count": 49
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1800x720 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "This isn't very helpful. The data is too clustered towards the lower end for the reg line to mean anything. We'll just stick with the line plot. Let's now try adding a reggression line to the crop data"
      ],
      "metadata": {
        "id": "1HLY_Diq-LNs"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "sb.set(rc = {'figure.figsize':(25,10)})\n",
        "p = sb.regplot(data=crop_yield, x=\"TIME\", y=\"Value\")\n",
        "p.set_xlabel(\"Year\", fontsize = 20)\n",
        "p.set_ylabel(\"Tonnes of Crop Produced by Given Country\", fontsize = 20)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 635
        },
        "id": "YkWIOiWa_DMK",
        "outputId": "def39017-c11c-457a-e072-8a04012a2d17"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0, 0.5, 'Tonnes of Crop Produced by Given Country')"
            ]
          },
          "metadata": {},
          "execution_count": 50
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1800x720 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "This isn't very helpful either. The data is too clustered towards the lower end for the reg line to mean anything. We'll just stick with the line plot to see the general trend.\n"
      ],
      "metadata": {
        "id": "XgvpEjfEBbuq"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "We now need to compare these relationships to each other.\n",
        "\n",
        "One potential way of doing this is by plotting all the regresssion lines on one line and examining the growth behavior of all the other lines compared to the global temperature line. However, all of these y-axes are on different scales, and a graph like this wouldn't make sense."
      ],
      "metadata": {
        "id": "utGAloieXW4N"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "However, one potential way we could if these relationships are correlated is by examning the equation of each regression line. In the y = mx+b equation, m would be the slope here. If two relationships have positive slope, then we can see the rate of change and how correlated they are. I'm assuming in this case that similar directions of rate of change mean similar correlation.\n",
        "\n",
        "We'll use the stats.lingress function to help us with this."
      ],
      "metadata": {
        "id": "uEc_1-5sZNJS"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "slope, intercept, r_value, p_value, std_err = stats.linregress(temperature[\"Year\"], temperature[\"Value\"])\n",
        "\n",
        "print(\"Slope for change in global temperature\")\n",
        "print(slope)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Wz6IZf7NkWK5",
        "outputId": "fde656e8-933a-4bc3-9c9d-8afdf372e9b6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Slope for change in global temperature\n",
            "0.008488008470402835\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "slope, intercept, r_value, p_value, std_err = stats.linregress(meat_produced[\"Year\"], meat_produced[\"Tonnes of Meat Produced by Given Country\"])\n",
        "\n",
        "print(\"Slope for Tonnes of Meat Produced\")\n",
        "print(slope)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "DXEiT_nwl78R",
        "outputId": "f8303a66-bbc4-43cc-ba18-2606b6cf5a80"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Slope for Tonnes of Meat Produced\n",
            "20956.277841229872\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "slope, intercept, r_value, p_value, std_err = stats.linregress(crop_yield[\"TIME\"], crop_yield[\"Value\"]) #combining rice and wheat under one axis here\n",
        "print(\"Slope for Tonnes of Crop Produced\")\n",
        "print(slope)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "rD0pXv0EmMdH",
        "outputId": "3e44281c-1fdf-4306-919c-68767acf467c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Slope for Tonnes of Crop Produced\n",
            "423.3440815331011\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "All the slopes have a generally upward trend. Although they appear significantly different from each other, it is important to remember scales. In this case, temperature should have a much lesser slope than tons of food production, or else it would be alarming to see global temperatures hit thousands of degrees.\n",
        "\n",
        "It is also important to remember that temperature in general has a quadratic increase, since the change in change in temperature is linear. The integral of a linear function results in a quadratic function.\n",
        "\n",
        "It is the positive slops that matter here. The fact that all of these have a heavy increase in rate of change can show that they are all correlated to each other.\n",
        "\n",
        "**I am going to make the conclusion that the increase in global temperature is correlated to the increase in global meat production, as well as the crop production of rice and wheat**"
      ],
      "metadata": {
        "id": "jy66RbYAm5J_"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "#Statistically Validating Results and Further Analysis\n"
      ],
      "metadata": {
        "id": "yhtHdC_Ss35U"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "I am opting to use the Pearson Correlation Coefficient Test for each dataset. We can then determine how correlated our results are.\n",
        "\n",
        "Let us start off by running a Pearson's Correlation Coefficient test on the three datasets"
      ],
      "metadata": {
        "id": "DB3HDTP8t2Ze"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "r, p_value = pearsonr(temperature[\"Year\"], temperature[\"Value\"])\n",
        "print('Correlation: {}'.format(r))\n",
        "print('P value: {}'.format(p_value))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "YQNZUu5htDM4",
        "outputId": "a02cbe03-438b-4e2a-b6ec-0ed5916075c6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Correlation: 0.848972363863876\n",
            "P value: 6.895576495561065e-41\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "This is a pretty strong correlation. We can conclude with very strong confidence that the temperature has been rising."
      ],
      "metadata": {
        "id": "9xPoxpnqvEK_"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "r, p_value = pearsonr(meat_produced[\"Year\"], meat_produced[\"Tonnes of Meat Produced by Given Country\"])\n",
        "print('Correlation: {}'.format(r))\n",
        "print('P value: {}'.format(p_value))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "dB9wOFOKve-w",
        "outputId": "93243811-8d1a-468b-eb0c-80a85fd0e0c5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Correlation: 0.07937456734805791\n",
            "P value: 1.4120975458641865e-17\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Although there is a general rise in meat production, the correlation is not too strong. We can still conclude that there is correlation. The P value in this case is extremely far too close to 0.\n",
        "\n",
        "However, according to our visualization, the values are simply clustered apart.\n",
        "\n",
        "As such, we can conclude there is a positive increase in overall meat production, it just is not very correlated.\n",
        "\n",
        "This is likely because there are third world and first world countries. The third world countries produce less meat due to its costly price to produce, while first world countries produce the most meat since they can afford to do so.\n",
        "\n",
        "Additionally, countries with more population will produce more meat in a given year, while countries with less population will produce less meat in a given year.\n",
        "\n",
        "This explains our so spread out results."
      ],
      "metadata": {
        "id": "DsQybCTywOR0"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "r, p_value = pearsonr(crop_yield[\"TIME\"], crop_yield[\"Value\"])\n",
        "print('Correlation: {}'.format(r))\n",
        "print('P value: {}'.format(p_value))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WlXXZQXZzaMQ",
        "outputId": "4dc81175-240a-423e-c7a7-ef806d477097"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Correlation: 0.04806179702698786\n",
            "P value: 0.008102523744209991\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Although there is a general rise in crop production, the correlation is not too strong. We can still conclude that there is correlation. The P value in this case is extremely far too close to 0.\n",
        "\n",
        "However, according to our visualization, the values are simply clustered apart.\n",
        "\n",
        "**As such, we can conclude there is a positive increase in overall crop production, it just is not very correlated.**\n",
        "\n",
        "This is likely because there are third world and first world countries. The third world countries produce less crop due to its costly price to produce, while first world countries produce the most meat since they can afford to do so.\n",
        "\n",
        "Additionally, countries with more population will produce more meat in a given year, while countries with less population will produce less meat in a given year.\n",
        "\n",
        "This explains our so spread out results."
      ],
      "metadata": {
        "id": "7hjEbMJ6zxl0"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "The Pearson Correlation Coefficient test also allows us to compare variables from different data sets.\n",
        "\n",
        "In this case, we can see if the rise in temperature is corelated to the rise in crop yield and meat production.\n",
        "\n",
        "Let's try doing that right now. We need to cut the temperature value to make sure that our data sets are within the same time range."
      ],
      "metadata": {
        "id": "DarEDXHzyUYl"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "temp_drop = temperature\n",
        "for i in range(81):\n",
        "  temp_drop = temp_drop.iloc[1: , :]\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "r4Hz6ng2zEjQ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "temp_drop.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "z_br6a5Pz-T9",
        "outputId": "53477710-d4b8-41fb-c7aa-6c2b2ee5d54b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    Year  Value\n",
              "81  1961   0.17\n",
              "82  1962   0.16\n",
              "83  1963  -0.02\n",
              "84  1964  -0.16\n",
              "85  1965  -0.09"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-a2b34c35-9b7e-4f07-828e-b463deeeb84e\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Year</th>\n",
              "      <th>Value</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>81</th>\n",
              "      <td>1961</td>\n",
              "      <td>0.17</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>82</th>\n",
              "      <td>1962</td>\n",
              "      <td>0.16</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>83</th>\n",
              "      <td>1963</td>\n",
              "      <td>-0.02</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>84</th>\n",
              "      <td>1964</td>\n",
              "      <td>-0.16</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>85</th>\n",
              "      <td>1965</td>\n",
              "      <td>-0.09</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a2b34c35-9b7e-4f07-828e-b463deeeb84e')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-a2b34c35-9b7e-4f07-828e-b463deeeb84e button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-a2b34c35-9b7e-4f07-828e-b463deeeb84e');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 58
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "temp_drop.tail()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "F3S0qVoTM8JQ",
        "outputId": "52393ac6-c476-4118-c537-c371377128f1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     Year  Value\n",
              "138  2018   0.89\n",
              "139  2019   1.09\n",
              "140  2020   1.17\n",
              "141  2021   0.85\n",
              "142  2022   0.95"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-19f86ecd-8b58-4c67-a428-6fc93fa88982\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Year</th>\n",
              "      <th>Value</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>138</th>\n",
              "      <td>2018</td>\n",
              "      <td>0.89</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>139</th>\n",
              "      <td>2019</td>\n",
              "      <td>1.09</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>140</th>\n",
              "      <td>2020</td>\n",
              "      <td>1.17</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>141</th>\n",
              "      <td>2021</td>\n",
              "      <td>0.85</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>142</th>\n",
              "      <td>2022</td>\n",
              "      <td>0.95</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-19f86ecd-8b58-4c67-a428-6fc93fa88982')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-19f86ecd-8b58-4c67-a428-6fc93fa88982 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-19f86ecd-8b58-4c67-a428-6fc93fa88982');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 59
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Since the meat dataset only goes up to 2018, we'll drop any years after 2018."
      ],
      "metadata": {
        "id": "nJabkGjVNFS7"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "temp_drop.drop(temp_drop.tail(4).index,inplace=True)"
      ],
      "metadata": {
        "id": "KTUni336NOXX",
        "outputId": "542972f9-64d6-4ef3-f944-0e086b011787",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-1-8d6cb29beac7>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mtemp_drop\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdrop\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtemp_drop\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtail\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m4\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mindex\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0minplace\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m: name 'temp_drop' is not defined"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "temp_drop.tail()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "f1u5sV1DNTOv",
        "outputId": "8fda1815-f874-4303-83c4-07eeef14c7c4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     Year  Value\n",
              "138  2018   0.89\n",
              "139  2019   1.09\n",
              "140  2020   1.17\n",
              "141  2021   0.85\n",
              "142  2022   0.95"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-f9233d36-48df-4b0f-83f4-ffd56dfd6df8\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Year</th>\n",
              "      <th>Value</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>138</th>\n",
              "      <td>2018</td>\n",
              "      <td>0.89</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>139</th>\n",
              "      <td>2019</td>\n",
              "      <td>1.09</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>140</th>\n",
              "      <td>2020</td>\n",
              "      <td>1.17</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>141</th>\n",
              "      <td>2021</td>\n",
              "      <td>0.85</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>142</th>\n",
              "      <td>2022</td>\n",
              "      <td>0.95</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f9233d36-48df-4b0f-83f4-ffd56dfd6df8')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-f9233d36-48df-4b0f-83f4-ffd56dfd6df8 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-f9233d36-48df-4b0f-83f4-ffd56dfd6df8');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 60
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "We should pivot the meat dataset where its pivot is country. Let us see if that will help us get towards having the same number of values."
      ],
      "metadata": {
        "id": "xdaB6kIiL768"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "meat_produced_pivoted = pd.pivot_table(meat_produced,index='Year',columns='Entity',values='Tonnes of Meat Produced by Given Country',aggfunc='sum')"
      ],
      "metadata": {
        "id": "PQR_AWk5z-NM"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "meat_produced_pivoted.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 267
        },
        "id": "3FI7F3IJNZ9r",
        "outputId": "e09db50f-634d-400a-c5ec-bf75c01c64be"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Entity  Afghanistan  Albania  Algeria  American Samoa   Angola  \\\n",
              "Year                                                             \n",
              "1961       129420.0  25410.0  82840.0           413.0  35719.0   \n",
              "1962       132206.0  25720.0  80160.0           359.0  36849.0   \n",
              "1963       138971.0  25000.0  75644.0           459.0  37964.0   \n",
              "1964       143830.0  23700.0  82345.0           565.0  42162.0   \n",
              "1965       150195.0  25225.0  89856.0           700.0  45849.0   \n",
              "\n",
              "Entity  Antigua and Barbuda  Argentina  Armenia  Australia   Austria  ...  \\\n",
              "Year                                                                  ...   \n",
              "1961                  395.0  2604313.0      NaN  1400927.0  453845.0  ...   \n",
              "1962                  329.0  2829701.0      NaN  1587203.0  488636.0  ...   \n",
              "1963                  364.0  3079576.0      NaN  1711193.0  490496.0  ...   \n",
              "1964                  432.0  2518595.0      NaN  1780579.0  498643.0  ...   \n",
              "1965                  393.0  2618187.0      NaN  1824713.0  491469.0  ...   \n",
              "\n",
              "Entity  Uzbekistan  Vanuatu  Venezuela   Vietnam  Wallis and Futuna  \\\n",
              "Year                                                                  \n",
              "1961           NaN   2312.0   209785.0  374975.0              158.0   \n",
              "1962           NaN   2447.0   219085.0  388045.0              158.0   \n",
              "1963           NaN   2609.0   230399.0  405080.0              159.0   \n",
              "1964           NaN   2758.0   252785.0  405074.0              159.0   \n",
              "1965           NaN   2877.0   259771.0  425588.0              160.0   \n",
              "\n",
              "Entity  Western Sahara    Yemen  Yugoslavia   Zambia  Zimbabwe  \n",
              "Year                                                            \n",
              "1961             872.0  46610.0    759490.0  44005.0   74235.0  \n",
              "1962             446.0  47635.0    776050.0  43848.0   76058.0  \n",
              "1963             435.0  48080.0    758595.0  43994.0   78761.0  \n",
              "1964             445.0  49175.0    830817.0  45311.0   76467.0  \n",
              "1965             416.0  50520.0    944989.0  48910.0   77445.0  \n",
              "\n",
              "[5 rows x 219 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-a4dbe622-a58a-4cc8-9455-a309eaffcdd6\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th>Entity</th>\n",
              "      <th>Afghanistan</th>\n",
              "      <th>Albania</th>\n",
              "      <th>Algeria</th>\n",
              "      <th>American Samoa</th>\n",
              "      <th>Angola</th>\n",
              "      <th>Antigua and Barbuda</th>\n",
              "      <th>Argentina</th>\n",
              "      <th>Armenia</th>\n",
              "      <th>Australia</th>\n",
              "      <th>Austria</th>\n",
              "      <th>...</th>\n",
              "      <th>Uzbekistan</th>\n",
              "      <th>Vanuatu</th>\n",
              "      <th>Venezuela</th>\n",
              "      <th>Vietnam</th>\n",
              "      <th>Wallis and Futuna</th>\n",
              "      <th>Western Sahara</th>\n",
              "      <th>Yemen</th>\n",
              "      <th>Yugoslavia</th>\n",
              "      <th>Zambia</th>\n",
              "      <th>Zimbabwe</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Year</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1961</th>\n",
              "      <td>129420.0</td>\n",
              "      <td>25410.0</td>\n",
              "      <td>82840.0</td>\n",
              "      <td>413.0</td>\n",
              "      <td>35719.0</td>\n",
              "      <td>395.0</td>\n",
              "      <td>2604313.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1400927.0</td>\n",
              "      <td>453845.0</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2312.0</td>\n",
              "      <td>209785.0</td>\n",
              "      <td>374975.0</td>\n",
              "      <td>158.0</td>\n",
              "      <td>872.0</td>\n",
              "      <td>46610.0</td>\n",
              "      <td>759490.0</td>\n",
              "      <td>44005.0</td>\n",
              "      <td>74235.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1962</th>\n",
              "      <td>132206.0</td>\n",
              "      <td>25720.0</td>\n",
              "      <td>80160.0</td>\n",
              "      <td>359.0</td>\n",
              "      <td>36849.0</td>\n",
              "      <td>329.0</td>\n",
              "      <td>2829701.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1587203.0</td>\n",
              "      <td>488636.0</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2447.0</td>\n",
              "      <td>219085.0</td>\n",
              "      <td>388045.0</td>\n",
              "      <td>158.0</td>\n",
              "      <td>446.0</td>\n",
              "      <td>47635.0</td>\n",
              "      <td>776050.0</td>\n",
              "      <td>43848.0</td>\n",
              "      <td>76058.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1963</th>\n",
              "      <td>138971.0</td>\n",
              "      <td>25000.0</td>\n",
              "      <td>75644.0</td>\n",
              "      <td>459.0</td>\n",
              "      <td>37964.0</td>\n",
              "      <td>364.0</td>\n",
              "      <td>3079576.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1711193.0</td>\n",
              "      <td>490496.0</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2609.0</td>\n",
              "      <td>230399.0</td>\n",
              "      <td>405080.0</td>\n",
              "      <td>159.0</td>\n",
              "      <td>435.0</td>\n",
              "      <td>48080.0</td>\n",
              "      <td>758595.0</td>\n",
              "      <td>43994.0</td>\n",
              "      <td>78761.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1964</th>\n",
              "      <td>143830.0</td>\n",
              "      <td>23700.0</td>\n",
              "      <td>82345.0</td>\n",
              "      <td>565.0</td>\n",
              "      <td>42162.0</td>\n",
              "      <td>432.0</td>\n",
              "      <td>2518595.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1780579.0</td>\n",
              "      <td>498643.0</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2758.0</td>\n",
              "      <td>252785.0</td>\n",
              "      <td>405074.0</td>\n",
              "      <td>159.0</td>\n",
              "      <td>445.0</td>\n",
              "      <td>49175.0</td>\n",
              "      <td>830817.0</td>\n",
              "      <td>45311.0</td>\n",
              "      <td>76467.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1965</th>\n",
              "      <td>150195.0</td>\n",
              "      <td>25225.0</td>\n",
              "      <td>89856.0</td>\n",
              "      <td>700.0</td>\n",
              "      <td>45849.0</td>\n",
              "      <td>393.0</td>\n",
              "      <td>2618187.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1824713.0</td>\n",
              "      <td>491469.0</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2877.0</td>\n",
              "      <td>259771.0</td>\n",
              "      <td>425588.0</td>\n",
              "      <td>160.0</td>\n",
              "      <td>416.0</td>\n",
              "      <td>50520.0</td>\n",
              "      <td>944989.0</td>\n",
              "      <td>48910.0</td>\n",
              "      <td>77445.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows Ã 219 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a4dbe622-a58a-4cc8-9455-a309eaffcdd6')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-a4dbe622-a58a-4cc8-9455-a309eaffcdd6 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-a4dbe622-a58a-4cc8-9455-a309eaffcdd6');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 63
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "len(meat_produced_pivoted.index)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "COeJ0jJSNlT-",
        "outputId": "41444f8b-36cd-4b14-e997-b2524d2f3b25"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "58"
            ]
          },
          "metadata": {},
          "execution_count": 64
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "len(temp_drop.index)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "g28sfmvqN1JS",
        "outputId": "300e683f-e7b7-4d90-9b85-d8e0e798da03"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "58"
            ]
          },
          "metadata": {},
          "execution_count": 65
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "meat_produced_pivoted[\"Yearly Total\"] = meat_produced_pivoted.sum(axis=1)"
      ],
      "metadata": {
        "id": "q1ZcYb0bOR8Y"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "I'll add a yearly total column, which is just the sum of all the countrys' values for a given row"
      ],
      "metadata": {
        "id": "XVem-bqoOn-1"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "meat_produced_pivoted.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 310
        },
        "id": "Kja3JciYOkfC",
        "outputId": "5d6dad2f-92dd-4d76-f365-d4954d27be4f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Entity  Afghanistan  Albania  Algeria  American Samoa   Angola  \\\n",
              "Year                                                             \n",
              "1961       129420.0  25410.0  82840.0           413.0  35719.0   \n",
              "1962       132206.0  25720.0  80160.0           359.0  36849.0   \n",
              "1963       138971.0  25000.0  75644.0           459.0  37964.0   \n",
              "1964       143830.0  23700.0  82345.0           565.0  42162.0   \n",
              "1965       150195.0  25225.0  89856.0           700.0  45849.0   \n",
              "\n",
              "Entity  Antigua and Barbuda  Argentina  Armenia  Australia   Austria  ...  \\\n",
              "Year                                                                  ...   \n",
              "1961                  395.0  2604313.0      NaN  1400927.0  453845.0  ...   \n",
              "1962                  329.0  2829701.0      NaN  1587203.0  488636.0  ...   \n",
              "1963                  364.0  3079576.0      NaN  1711193.0  490496.0  ...   \n",
              "1964                  432.0  2518595.0      NaN  1780579.0  498643.0  ...   \n",
              "1965                  393.0  2618187.0      NaN  1824713.0  491469.0  ...   \n",
              "\n",
              "Entity  Vanuatu  Venezuela   Vietnam  Wallis and Futuna  Western Sahara  \\\n",
              "Year                                                                      \n",
              "1961     2312.0   209785.0  374975.0              158.0           872.0   \n",
              "1962     2447.0   219085.0  388045.0              158.0           446.0   \n",
              "1963     2609.0   230399.0  405080.0              159.0           435.0   \n",
              "1964     2758.0   252785.0  405074.0              159.0           445.0   \n",
              "1965     2877.0   259771.0  425588.0              160.0           416.0   \n",
              "\n",
              "Entity    Yemen  Yugoslavia   Zambia  Zimbabwe  Yearly Total  \n",
              "Year                                                          \n",
              "1961    46610.0    759490.0  44005.0   74235.0    70440520.0  \n",
              "1962    47635.0    776050.0  43848.0   76058.0    73704523.0  \n",
              "1963    48080.0    758595.0  43994.0   78761.0    77934403.0  \n",
              "1964    49175.0    830817.0  45311.0   76467.0    79555984.0  \n",
              "1965    50520.0    944989.0  48910.0   77445.0    83585274.0  \n",
              "\n",
              "[5 rows x 220 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-9386e3ab-94cb-4929-8fbc-3bafb084b489\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th>Entity</th>\n",
              "      <th>Afghanistan</th>\n",
              "      <th>Albania</th>\n",
              "      <th>Algeria</th>\n",
              "      <th>American Samoa</th>\n",
              "      <th>Angola</th>\n",
              "      <th>Antigua and Barbuda</th>\n",
              "      <th>Argentina</th>\n",
              "      <th>Armenia</th>\n",
              "      <th>Australia</th>\n",
              "      <th>Austria</th>\n",
              "      <th>...</th>\n",
              "      <th>Vanuatu</th>\n",
              "      <th>Venezuela</th>\n",
              "      <th>Vietnam</th>\n",
              "      <th>Wallis and Futuna</th>\n",
              "      <th>Western Sahara</th>\n",
              "      <th>Yemen</th>\n",
              "      <th>Yugoslavia</th>\n",
              "      <th>Zambia</th>\n",
              "      <th>Zimbabwe</th>\n",
              "      <th>Yearly Total</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Year</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1961</th>\n",
              "      <td>129420.0</td>\n",
              "      <td>25410.0</td>\n",
              "      <td>82840.0</td>\n",
              "      <td>413.0</td>\n",
              "      <td>35719.0</td>\n",
              "      <td>395.0</td>\n",
              "      <td>2604313.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1400927.0</td>\n",
              "      <td>453845.0</td>\n",
              "      <td>...</td>\n",
              "      <td>2312.0</td>\n",
              "      <td>209785.0</td>\n",
              "      <td>374975.0</td>\n",
              "      <td>158.0</td>\n",
              "      <td>872.0</td>\n",
              "      <td>46610.0</td>\n",
              "      <td>759490.0</td>\n",
              "      <td>44005.0</td>\n",
              "      <td>74235.0</td>\n",
              "      <td>70440520.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1962</th>\n",
              "      <td>132206.0</td>\n",
              "      <td>25720.0</td>\n",
              "      <td>80160.0</td>\n",
              "      <td>359.0</td>\n",
              "      <td>36849.0</td>\n",
              "      <td>329.0</td>\n",
              "      <td>2829701.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1587203.0</td>\n",
              "      <td>488636.0</td>\n",
              "      <td>...</td>\n",
              "      <td>2447.0</td>\n",
              "      <td>219085.0</td>\n",
              "      <td>388045.0</td>\n",
              "      <td>158.0</td>\n",
              "      <td>446.0</td>\n",
              "      <td>47635.0</td>\n",
              "      <td>776050.0</td>\n",
              "      <td>43848.0</td>\n",
              "      <td>76058.0</td>\n",
              "      <td>73704523.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1963</th>\n",
              "      <td>138971.0</td>\n",
              "      <td>25000.0</td>\n",
              "      <td>75644.0</td>\n",
              "      <td>459.0</td>\n",
              "      <td>37964.0</td>\n",
              "      <td>364.0</td>\n",
              "      <td>3079576.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1711193.0</td>\n",
              "      <td>490496.0</td>\n",
              "      <td>...</td>\n",
              "      <td>2609.0</td>\n",
              "      <td>230399.0</td>\n",
              "      <td>405080.0</td>\n",
              "      <td>159.0</td>\n",
              "      <td>435.0</td>\n",
              "      <td>48080.0</td>\n",
              "      <td>758595.0</td>\n",
              "      <td>43994.0</td>\n",
              "      <td>78761.0</td>\n",
              "      <td>77934403.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1964</th>\n",
              "      <td>143830.0</td>\n",
              "      <td>23700.0</td>\n",
              "      <td>82345.0</td>\n",
              "      <td>565.0</td>\n",
              "      <td>42162.0</td>\n",
              "      <td>432.0</td>\n",
              "      <td>2518595.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1780579.0</td>\n",
              "      <td>498643.0</td>\n",
              "      <td>...</td>\n",
              "      <td>2758.0</td>\n",
              "      <td>252785.0</td>\n",
              "      <td>405074.0</td>\n",
              "      <td>159.0</td>\n",
              "      <td>445.0</td>\n",
              "      <td>49175.0</td>\n",
              "      <td>830817.0</td>\n",
              "      <td>45311.0</td>\n",
              "      <td>76467.0</td>\n",
              "      <td>79555984.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1965</th>\n",
              "      <td>150195.0</td>\n",
              "      <td>25225.0</td>\n",
              "      <td>89856.0</td>\n",
              "      <td>700.0</td>\n",
              "      <td>45849.0</td>\n",
              "      <td>393.0</td>\n",
              "      <td>2618187.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1824713.0</td>\n",
              "      <td>491469.0</td>\n",
              "      <td>...</td>\n",
              "      <td>2877.0</td>\n",
              "      <td>259771.0</td>\n",
              "      <td>425588.0</td>\n",
              "      <td>160.0</td>\n",
              "      <td>416.0</td>\n",
              "      <td>50520.0</td>\n",
              "      <td>944989.0</td>\n",
              "      <td>48910.0</td>\n",
              "      <td>77445.0</td>\n",
              "      <td>83585274.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows Ã 220 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9386e3ab-94cb-4929-8fbc-3bafb084b489')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-9386e3ab-94cb-4929-8fbc-3bafb084b489 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-9386e3ab-94cb-4929-8fbc-3bafb084b489');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 67
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "For clarity sake, let's visualize the total by year."
      ],
      "metadata": {
        "id": "MR9Oc2Btz9wE"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "sb.set(rc = {'figure.figsize':(25,10)})\n",
        "p = sb.scatterplot(data=meat_produced_pivoted, x=\"Year\", y=\"Yearly Total\")\n",
        "p.set_xlabel(\"Year\", fontsize = 20)\n",
        "p.set_ylabel(\"Total Meat Produced by Every Country\", fontsize = 20)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 646
        },
        "id": "MMdYRes-O6Rc",
        "outputId": "8cd52928-38b7-4e10-ffb1-9ba3740fedac"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0, 0.5, 'Total Meat Produced by Every Country')"
            ]
          },
          "metadata": {},
          "execution_count": 68
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1800x720 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "This is so much clearer in terms of how meat production is changing by year compared to the unmelted dataset."
      ],
      "metadata": {
        "id": "fODRYzCkPOxa"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Let's do the same for the crop yield dataset. We'll start by matching the timeframe of the temperature dataset to the crop yield dataset. In this case, it is from 1990 to 2022."
      ],
      "metadata": {
        "id": "Ju0qtBuEQ2J6"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "temp_drop1 = temperature\n",
        "for i in range(110):\n",
        "  temp_drop1 = temp_drop1.iloc[1: , :]"
      ],
      "metadata": {
        "id": "7JKkwfyUR0Dp"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "temp_drop1.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "WPgQMhd1R1dD",
        "outputId": "b8d549b5-dbeb-4baa-dd2c-5e2f4f6ee52b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     Year  Value\n",
              "110  1990   0.76\n",
              "111  1991   0.37\n",
              "112  1992   0.44\n",
              "113  1993   0.41\n",
              "114  1994   0.38"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-2aeef099-651b-4925-8bc0-821d9eaa2888\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Year</th>\n",
              "      <th>Value</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>110</th>\n",
              "      <td>1990</td>\n",
              "      <td>0.76</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>111</th>\n",
              "      <td>1991</td>\n",
              "      <td>0.37</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>112</th>\n",
              "      <td>1992</td>\n",
              "      <td>0.44</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>113</th>\n",
              "      <td>1993</td>\n",
              "      <td>0.41</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>114</th>\n",
              "      <td>1994</td>\n",
              "      <td>0.38</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2aeef099-651b-4925-8bc0-821d9eaa2888')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-2aeef099-651b-4925-8bc0-821d9eaa2888 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-2aeef099-651b-4925-8bc0-821d9eaa2888');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 70
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "We'll now pivot the crop yield dataset."
      ],
      "metadata": {
        "id": "MTL4CY6gSUp8"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "crop_yield_pivot = pd.pivot_table(crop_yield,index='TIME',columns='COUNTRY',values='Value',aggfunc='sum')"
      ],
      "metadata": {
        "id": "CUCzv0pQSIMj"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "crop_yield_pivot.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 267
        },
        "id": "Y6VETYasTCq8",
        "outputId": "8557089e-9eaa-4c6d-a93f-ac8bf2065d47"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "COUNTRY       ARG      AUS      BRA      BRICS      CAN    CHE      CHL  \\\n",
              "TIME                                                                      \n",
              "1990     11328.04  15806.1  8416.36  410220.99  32098.3  563.0  1809.52   \n",
              "1991     10235.64  11514.4  9437.19  400540.27  31945.6  602.0  1667.74   \n",
              "1992     10494.44  15596.7  8820.81  412903.01  29877.2  546.0  1646.84   \n",
              "1993     10150.44  17521.3  8772.81  419730.50  27225.9  591.0  1412.16   \n",
              "1994     11819.16   9977.3  8574.71  404001.55  22919.5  584.0  1360.50   \n",
              "\n",
              "COUNTRY        CHN     COL      EGY  ...    PRY       RUS     SAU       THA  \\\n",
              "TIME                                 ...                                      \n",
              "1990     225460.00  1485.0  6453.48  ...  319.2  50492.34  3580.0  11381.76   \n",
              "1991     219472.33  1102.6  6862.11  ...  387.5  39671.95  4035.0  13504.80   \n",
              "1992     227285.50  1092.0  7315.30  ...  494.3  46920.30  4124.0  13185.05   \n",
              "1993     227227.36  1164.6  7702.71  ...  439.0  44234.05  3430.0  12211.91   \n",
              "1994     219283.30  1155.0  7598.58  ...  275.5  32651.44  2646.0  13975.48   \n",
              "\n",
              "COUNTRY      TUR        UKR        USA       VNM         WLD     ZAF  \n",
              "TIME                                                                  \n",
              "1990     20160.0      0.000  79225.041  12823.07  888480.913  1711.0  \n",
              "1991     20533.0  27928.545  58919.509  13087.87  907872.546  2144.0  \n",
              "1992     19447.0  19568.391  72806.408  14400.53  924996.226  1326.0  \n",
              "1993     21151.0  21876.382  70151.662  15232.27  932677.566  1986.0  \n",
              "1994     17634.0  13909.696  69409.733  15693.17  902312.305  1842.0  \n",
              "\n",
              "[5 rows x 37 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-d33d8ba9-7217-485d-9d6c-a7076e86e474\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th>COUNTRY</th>\n",
              "      <th>ARG</th>\n",
              "      <th>AUS</th>\n",
              "      <th>BRA</th>\n",
              "      <th>BRICS</th>\n",
              "      <th>CAN</th>\n",
              "      <th>CHE</th>\n",
              "      <th>CHL</th>\n",
              "      <th>CHN</th>\n",
              "      <th>COL</th>\n",
              "      <th>EGY</th>\n",
              "      <th>...</th>\n",
              "      <th>PRY</th>\n",
              "      <th>RUS</th>\n",
              "      <th>SAU</th>\n",
              "      <th>THA</th>\n",
              "      <th>TUR</th>\n",
              "      <th>UKR</th>\n",
              "      <th>USA</th>\n",
              "      <th>VNM</th>\n",
              "      <th>WLD</th>\n",
              "      <th>ZAF</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>TIME</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1990</th>\n",
              "      <td>11328.04</td>\n",
              "      <td>15806.1</td>\n",
              "      <td>8416.36</td>\n",
              "      <td>410220.99</td>\n",
              "      <td>32098.3</td>\n",
              "      <td>563.0</td>\n",
              "      <td>1809.52</td>\n",
              "      <td>225460.00</td>\n",
              "      <td>1485.0</td>\n",
              "      <td>6453.48</td>\n",
              "      <td>...</td>\n",
              "      <td>319.2</td>\n",
              "      <td>50492.34</td>\n",
              "      <td>3580.0</td>\n",
              "      <td>11381.76</td>\n",
              "      <td>20160.0</td>\n",
              "      <td>0.000</td>\n",
              "      <td>79225.041</td>\n",
              "      <td>12823.07</td>\n",
              "      <td>888480.913</td>\n",
              "      <td>1711.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1991</th>\n",
              "      <td>10235.64</td>\n",
              "      <td>11514.4</td>\n",
              "      <td>9437.19</td>\n",
              "      <td>400540.27</td>\n",
              "      <td>31945.6</td>\n",
              "      <td>602.0</td>\n",
              "      <td>1667.74</td>\n",
              "      <td>219472.33</td>\n",
              "      <td>1102.6</td>\n",
              "      <td>6862.11</td>\n",
              "      <td>...</td>\n",
              "      <td>387.5</td>\n",
              "      <td>39671.95</td>\n",
              "      <td>4035.0</td>\n",
              "      <td>13504.80</td>\n",
              "      <td>20533.0</td>\n",
              "      <td>27928.545</td>\n",
              "      <td>58919.509</td>\n",
              "      <td>13087.87</td>\n",
              "      <td>907872.546</td>\n",
              "      <td>2144.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1992</th>\n",
              "      <td>10494.44</td>\n",
              "      <td>15596.7</td>\n",
              "      <td>8820.81</td>\n",
              "      <td>412903.01</td>\n",
              "      <td>29877.2</td>\n",
              "      <td>546.0</td>\n",
              "      <td>1646.84</td>\n",
              "      <td>227285.50</td>\n",
              "      <td>1092.0</td>\n",
              "      <td>7315.30</td>\n",
              "      <td>...</td>\n",
              "      <td>494.3</td>\n",
              "      <td>46920.30</td>\n",
              "      <td>4124.0</td>\n",
              "      <td>13185.05</td>\n",
              "      <td>19447.0</td>\n",
              "      <td>19568.391</td>\n",
              "      <td>72806.408</td>\n",
              "      <td>14400.53</td>\n",
              "      <td>924996.226</td>\n",
              "      <td>1326.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1993</th>\n",
              "      <td>10150.44</td>\n",
              "      <td>17521.3</td>\n",
              "      <td>8772.81</td>\n",
              "      <td>419730.50</td>\n",
              "      <td>27225.9</td>\n",
              "      <td>591.0</td>\n",
              "      <td>1412.16</td>\n",
              "      <td>227227.36</td>\n",
              "      <td>1164.6</td>\n",
              "      <td>7702.71</td>\n",
              "      <td>...</td>\n",
              "      <td>439.0</td>\n",
              "      <td>44234.05</td>\n",
              "      <td>3430.0</td>\n",
              "      <td>12211.91</td>\n",
              "      <td>21151.0</td>\n",
              "      <td>21876.382</td>\n",
              "      <td>70151.662</td>\n",
              "      <td>15232.27</td>\n",
              "      <td>932677.566</td>\n",
              "      <td>1986.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1994</th>\n",
              "      <td>11819.16</td>\n",
              "      <td>9977.3</td>\n",
              "      <td>8574.71</td>\n",
              "      <td>404001.55</td>\n",
              "      <td>22919.5</td>\n",
              "      <td>584.0</td>\n",
              "      <td>1360.50</td>\n",
              "      <td>219283.30</td>\n",
              "      <td>1155.0</td>\n",
              "      <td>7598.58</td>\n",
              "      <td>...</td>\n",
              "      <td>275.5</td>\n",
              "      <td>32651.44</td>\n",
              "      <td>2646.0</td>\n",
              "      <td>13975.48</td>\n",
              "      <td>17634.0</td>\n",
              "      <td>13909.696</td>\n",
              "      <td>69409.733</td>\n",
              "      <td>15693.17</td>\n",
              "      <td>902312.305</td>\n",
              "      <td>1842.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows Ã 37 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d33d8ba9-7217-485d-9d6c-a7076e86e474')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-d33d8ba9-7217-485d-9d6c-a7076e86e474 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-d33d8ba9-7217-485d-9d6c-a7076e86e474');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 79
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "It looks like the values for rice and wheat were added together. That is fine with me. Let's create a new column for world total.\n"
      ],
      "metadata": {
        "id": "7Oom7k2KRW7T"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "crop_yield_pivot[\"Yearly Total\"] = crop_yield_pivot.sum(axis=1)"
      ],
      "metadata": {
        "id": "-r8VjANITU-b"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "crop_yield_pivot.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 267
        },
        "id": "ovo9Fkr3TdU9",
        "outputId": "b26c9141-eb0c-498b-b1df-08e2d644a390"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "COUNTRY       ARG      AUS      BRA      BRICS      CAN    CHE      CHL  \\\n",
              "TIME                                                                      \n",
              "1990     11328.04  15806.1  8416.36  410220.99  32098.3  563.0  1809.52   \n",
              "1991     10235.64  11514.4  9437.19  400540.27  31945.6  602.0  1667.74   \n",
              "1992     10494.44  15596.7  8820.81  412903.01  29877.2  546.0  1646.84   \n",
              "1993     10150.44  17521.3  8772.81  419730.50  27225.9  591.0  1412.16   \n",
              "1994     11819.16   9977.3  8574.71  404001.55  22919.5  584.0  1360.50   \n",
              "\n",
              "COUNTRY        CHN     COL      EGY  ...       RUS     SAU       THA      TUR  \\\n",
              "TIME                                 ...                                        \n",
              "1990     225460.00  1485.0  6453.48  ...  50492.34  3580.0  11381.76  20160.0   \n",
              "1991     219472.33  1102.6  6862.11  ...  39671.95  4035.0  13504.80  20533.0   \n",
              "1992     227285.50  1092.0  7315.30  ...  46920.30  4124.0  13185.05  19447.0   \n",
              "1993     227227.36  1164.6  7702.71  ...  44234.05  3430.0  12211.91  21151.0   \n",
              "1994     219283.30  1155.0  7598.58  ...  32651.44  2646.0  13975.48  17634.0   \n",
              "\n",
              "COUNTRY        UKR        USA       VNM         WLD     ZAF  Yearly Total  \n",
              "TIME                                                                       \n",
              "1990         0.000  79225.041  12823.07  888480.913  1711.0   2008482.786  \n",
              "1991     27928.545  58919.509  13087.87  907872.546  2144.0   2026923.170  \n",
              "1992     19568.391  72806.408  14400.53  924996.226  1326.0   2087695.228  \n",
              "1993     21876.382  70151.662  15232.27  932677.566  1986.0   2100711.118  \n",
              "1994     13909.696  69409.733  15693.17  902312.305  1842.0   2016908.832  \n",
              "\n",
              "[5 rows x 38 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-ad7fa27c-63f1-42fb-b17c-b67b4990dbcb\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th>COUNTRY</th>\n",
              "      <th>ARG</th>\n",
              "      <th>AUS</th>\n",
              "      <th>BRA</th>\n",
              "      <th>BRICS</th>\n",
              "      <th>CAN</th>\n",
              "      <th>CHE</th>\n",
              "      <th>CHL</th>\n",
              "      <th>CHN</th>\n",
              "      <th>COL</th>\n",
              "      <th>EGY</th>\n",
              "      <th>...</th>\n",
              "      <th>RUS</th>\n",
              "      <th>SAU</th>\n",
              "      <th>THA</th>\n",
              "      <th>TUR</th>\n",
              "      <th>UKR</th>\n",
              "      <th>USA</th>\n",
              "      <th>VNM</th>\n",
              "      <th>WLD</th>\n",
              "      <th>ZAF</th>\n",
              "      <th>Yearly Total</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>TIME</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1990</th>\n",
              "      <td>11328.04</td>\n",
              "      <td>15806.1</td>\n",
              "      <td>8416.36</td>\n",
              "      <td>410220.99</td>\n",
              "      <td>32098.3</td>\n",
              "      <td>563.0</td>\n",
              "      <td>1809.52</td>\n",
              "      <td>225460.00</td>\n",
              "      <td>1485.0</td>\n",
              "      <td>6453.48</td>\n",
              "      <td>...</td>\n",
              "      <td>50492.34</td>\n",
              "      <td>3580.0</td>\n",
              "      <td>11381.76</td>\n",
              "      <td>20160.0</td>\n",
              "      <td>0.000</td>\n",
              "      <td>79225.041</td>\n",
              "      <td>12823.07</td>\n",
              "      <td>888480.913</td>\n",
              "      <td>1711.0</td>\n",
              "      <td>2008482.786</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1991</th>\n",
              "      <td>10235.64</td>\n",
              "      <td>11514.4</td>\n",
              "      <td>9437.19</td>\n",
              "      <td>400540.27</td>\n",
              "      <td>31945.6</td>\n",
              "      <td>602.0</td>\n",
              "      <td>1667.74</td>\n",
              "      <td>219472.33</td>\n",
              "      <td>1102.6</td>\n",
              "      <td>6862.11</td>\n",
              "      <td>...</td>\n",
              "      <td>39671.95</td>\n",
              "      <td>4035.0</td>\n",
              "      <td>13504.80</td>\n",
              "      <td>20533.0</td>\n",
              "      <td>27928.545</td>\n",
              "      <td>58919.509</td>\n",
              "      <td>13087.87</td>\n",
              "      <td>907872.546</td>\n",
              "      <td>2144.0</td>\n",
              "      <td>2026923.170</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1992</th>\n",
              "      <td>10494.44</td>\n",
              "      <td>15596.7</td>\n",
              "      <td>8820.81</td>\n",
              "      <td>412903.01</td>\n",
              "      <td>29877.2</td>\n",
              "      <td>546.0</td>\n",
              "      <td>1646.84</td>\n",
              "      <td>227285.50</td>\n",
              "      <td>1092.0</td>\n",
              "      <td>7315.30</td>\n",
              "      <td>...</td>\n",
              "      <td>46920.30</td>\n",
              "      <td>4124.0</td>\n",
              "      <td>13185.05</td>\n",
              "      <td>19447.0</td>\n",
              "      <td>19568.391</td>\n",
              "      <td>72806.408</td>\n",
              "      <td>14400.53</td>\n",
              "      <td>924996.226</td>\n",
              "      <td>1326.0</td>\n",
              "      <td>2087695.228</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1993</th>\n",
              "      <td>10150.44</td>\n",
              "      <td>17521.3</td>\n",
              "      <td>8772.81</td>\n",
              "      <td>419730.50</td>\n",
              "      <td>27225.9</td>\n",
              "      <td>591.0</td>\n",
              "      <td>1412.16</td>\n",
              "      <td>227227.36</td>\n",
              "      <td>1164.6</td>\n",
              "      <td>7702.71</td>\n",
              "      <td>...</td>\n",
              "      <td>44234.05</td>\n",
              "      <td>3430.0</td>\n",
              "      <td>12211.91</td>\n",
              "      <td>21151.0</td>\n",
              "      <td>21876.382</td>\n",
              "      <td>70151.662</td>\n",
              "      <td>15232.27</td>\n",
              "      <td>932677.566</td>\n",
              "      <td>1986.0</td>\n",
              "      <td>2100711.118</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1994</th>\n",
              "      <td>11819.16</td>\n",
              "      <td>9977.3</td>\n",
              "      <td>8574.71</td>\n",
              "      <td>404001.55</td>\n",
              "      <td>22919.5</td>\n",
              "      <td>584.0</td>\n",
              "      <td>1360.50</td>\n",
              "      <td>219283.30</td>\n",
              "      <td>1155.0</td>\n",
              "      <td>7598.58</td>\n",
              "      <td>...</td>\n",
              "      <td>32651.44</td>\n",
              "      <td>2646.0</td>\n",
              "      <td>13975.48</td>\n",
              "      <td>17634.0</td>\n",
              "      <td>13909.696</td>\n",
              "      <td>69409.733</td>\n",
              "      <td>15693.17</td>\n",
              "      <td>902312.305</td>\n",
              "      <td>1842.0</td>\n",
              "      <td>2016908.832</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows Ã 38 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ad7fa27c-63f1-42fb-b17c-b67b4990dbcb')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-ad7fa27c-63f1-42fb-b17c-b67b4990dbcb button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-ad7fa27c-63f1-42fb-b17c-b67b4990dbcb');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 81
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Let's also drop the values outside of 2022 to fit within our temperature dataset."
      ],
      "metadata": {
        "id": "Epacb1UOUBPu"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "crop_yield_pivot.drop(crop_yield_pivot.tail(2030-2022).index,inplace=True)"
      ],
      "metadata": {
        "id": "ovlR_iLnUFzZ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "crop_yield_pivot.tail()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 267
        },
        "id": "eIRGfeK-UN5x",
        "outputId": "7ac6c42f-c049-4724-fa4e-da92ecfbb4d2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "COUNTRY        ARG        AUS        BRA       BRICS        CAN      CHE  \\\n",
              "TIME                                                                       \n",
              "2018     20390.240  17664.396  13631.120  581776.926  32351.900  491.094   \n",
              "2019     20559.109  15217.780  12283.140  589020.185  32669.800  456.290   \n",
              "2020     18016.000  31544.500  13959.512  613392.407  35188.181  446.258   \n",
              "2021     20655.306  23889.034  13362.716  612173.261  34110.133  494.059   \n",
              "2022     20850.733  24151.408  13422.977  614924.421  34953.013  493.832   \n",
              "\n",
              "COUNTRY       CHL         CHN       COL        EGY  ...        RUS      SAU  \\\n",
              "TIME                                                ...                       \n",
              "2018     1529.679  276751.434  1766.566  11115.529  ...  73174.371  586.400   \n",
              "2019     1348.606  277178.692  1806.135  13616.100  ...  75551.352  200.000   \n",
              "2020     1417.573  282552.000  2010.821  13512.600  ...  84141.194  500.000   \n",
              "2021     1440.625  279201.577  2016.779  13311.596  ...  83077.559  327.328   \n",
              "2022     1420.315  279729.738  2024.033  13406.133  ...  83936.277  327.579   \n",
              "\n",
              "COUNTRY        THA        TUR        UKR        USA        VNM          WLD  \\\n",
              "TIME                                                                          \n",
              "2018     21415.752  20564.000  24652.003  58367.535  28629.900  1238732.095   \n",
              "2019     18723.684  19600.000  28364.298  58424.926  28285.400  1263213.004   \n",
              "2020     19437.320  21088.000  25138.739  56434.451  27747.720  1284032.858   \n",
              "2021     20095.454  21308.274  29069.005  57570.042  28229.694  1301244.939   \n",
              "2022     20329.563  21604.726  29587.124  58053.896  28685.405  1309583.019   \n",
              "\n",
              "COUNTRY       ZAF  Yearly Total  \n",
              "TIME                             \n",
              "2018     1870.001   2801102.968  \n",
              "2019     1537.001   2838356.449  \n",
              "2020     2149.901   2919127.139  \n",
              "2021     2081.831   2941454.230  \n",
              "2022     2024.893   2959864.716  \n",
              "\n",
              "[5 rows x 38 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-7b814678-acfd-4655-a1ed-e48bcb78015b\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th>COUNTRY</th>\n",
              "      <th>ARG</th>\n",
              "      <th>AUS</th>\n",
              "      <th>BRA</th>\n",
              "      <th>BRICS</th>\n",
              "      <th>CAN</th>\n",
              "      <th>CHE</th>\n",
              "      <th>CHL</th>\n",
              "      <th>CHN</th>\n",
              "      <th>COL</th>\n",
              "      <th>EGY</th>\n",
              "      <th>...</th>\n",
              "      <th>RUS</th>\n",
              "      <th>SAU</th>\n",
              "      <th>THA</th>\n",
              "      <th>TUR</th>\n",
              "      <th>UKR</th>\n",
              "      <th>USA</th>\n",
              "      <th>VNM</th>\n",
              "      <th>WLD</th>\n",
              "      <th>ZAF</th>\n",
              "      <th>Yearly Total</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>TIME</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2018</th>\n",
              "      <td>20390.240</td>\n",
              "      <td>17664.396</td>\n",
              "      <td>13631.120</td>\n",
              "      <td>581776.926</td>\n",
              "      <td>32351.900</td>\n",
              "      <td>491.094</td>\n",
              "      <td>1529.679</td>\n",
              "      <td>276751.434</td>\n",
              "      <td>1766.566</td>\n",
              "      <td>11115.529</td>\n",
              "      <td>...</td>\n",
              "      <td>73174.371</td>\n",
              "      <td>586.400</td>\n",
              "      <td>21415.752</td>\n",
              "      <td>20564.000</td>\n",
              "      <td>24652.003</td>\n",
              "      <td>58367.535</td>\n",
              "      <td>28629.900</td>\n",
              "      <td>1238732.095</td>\n",
              "      <td>1870.001</td>\n",
              "      <td>2801102.968</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2019</th>\n",
              "      <td>20559.109</td>\n",
              "      <td>15217.780</td>\n",
              "      <td>12283.140</td>\n",
              "      <td>589020.185</td>\n",
              "      <td>32669.800</td>\n",
              "      <td>456.290</td>\n",
              "      <td>1348.606</td>\n",
              "      <td>277178.692</td>\n",
              "      <td>1806.135</td>\n",
              "      <td>13616.100</td>\n",
              "      <td>...</td>\n",
              "      <td>75551.352</td>\n",
              "      <td>200.000</td>\n",
              "      <td>18723.684</td>\n",
              "      <td>19600.000</td>\n",
              "      <td>28364.298</td>\n",
              "      <td>58424.926</td>\n",
              "      <td>28285.400</td>\n",
              "      <td>1263213.004</td>\n",
              "      <td>1537.001</td>\n",
              "      <td>2838356.449</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2020</th>\n",
              "      <td>18016.000</td>\n",
              "      <td>31544.500</td>\n",
              "      <td>13959.512</td>\n",
              "      <td>613392.407</td>\n",
              "      <td>35188.181</td>\n",
              "      <td>446.258</td>\n",
              "      <td>1417.573</td>\n",
              "      <td>282552.000</td>\n",
              "      <td>2010.821</td>\n",
              "      <td>13512.600</td>\n",
              "      <td>...</td>\n",
              "      <td>84141.194</td>\n",
              "      <td>500.000</td>\n",
              "      <td>19437.320</td>\n",
              "      <td>21088.000</td>\n",
              "      <td>25138.739</td>\n",
              "      <td>56434.451</td>\n",
              "      <td>27747.720</td>\n",
              "      <td>1284032.858</td>\n",
              "      <td>2149.901</td>\n",
              "      <td>2919127.139</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2021</th>\n",
              "      <td>20655.306</td>\n",
              "      <td>23889.034</td>\n",
              "      <td>13362.716</td>\n",
              "      <td>612173.261</td>\n",
              "      <td>34110.133</td>\n",
              "      <td>494.059</td>\n",
              "      <td>1440.625</td>\n",
              "      <td>279201.577</td>\n",
              "      <td>2016.779</td>\n",
              "      <td>13311.596</td>\n",
              "      <td>...</td>\n",
              "      <td>83077.559</td>\n",
              "      <td>327.328</td>\n",
              "      <td>20095.454</td>\n",
              "      <td>21308.274</td>\n",
              "      <td>29069.005</td>\n",
              "      <td>57570.042</td>\n",
              "      <td>28229.694</td>\n",
              "      <td>1301244.939</td>\n",
              "      <td>2081.831</td>\n",
              "      <td>2941454.230</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2022</th>\n",
              "      <td>20850.733</td>\n",
              "      <td>24151.408</td>\n",
              "      <td>13422.977</td>\n",
              "      <td>614924.421</td>\n",
              "      <td>34953.013</td>\n",
              "      <td>493.832</td>\n",
              "      <td>1420.315</td>\n",
              "      <td>279729.738</td>\n",
              "      <td>2024.033</td>\n",
              "      <td>13406.133</td>\n",
              "      <td>...</td>\n",
              "      <td>83936.277</td>\n",
              "      <td>327.579</td>\n",
              "      <td>20329.563</td>\n",
              "      <td>21604.726</td>\n",
              "      <td>29587.124</td>\n",
              "      <td>58053.896</td>\n",
              "      <td>28685.405</td>\n",
              "      <td>1309583.019</td>\n",
              "      <td>2024.893</td>\n",
              "      <td>2959864.716</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows Ã 38 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7b814678-acfd-4655-a1ed-e48bcb78015b')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-7b814678-acfd-4655-a1ed-e48bcb78015b button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-7b814678-acfd-4655-a1ed-e48bcb78015b');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 83
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "len(crop_yield_pivot.index)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7LRepZ1CUQ9b",
        "outputId": "613b4364-be62-48fc-d5c0-22b42756c290"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "33"
            ]
          },
          "metadata": {},
          "execution_count": 84
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "len(temp_drop1.index)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2LtCxIPuUX97",
        "outputId": "683ef887-e6dd-4f8d-c9c9-7030d5be45bd"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "33"
            ]
          },
          "metadata": {},
          "execution_count": 89
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "And let's visualize it for comprehension sake."
      ],
      "metadata": {
        "id": "fAHAy9epThKO"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "sb.set(rc = {'figure.figsize':(25,10)})\n",
        "p = sb.scatterplot(data=crop_yield_pivot, x=\"TIME\", y=\"Yearly Total\")\n",
        "p.set_xlabel(\"Year\", fontsize = 20)\n",
        "p.set_ylabel(\"Total Crop Produced by Every Country\", fontsize = 20)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 646
        },
        "id": "W4WJmHy2Tleo",
        "outputId": "23e43b14-ca4f-4392-c0c4-edc1ee3c27e1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0, 0.5, 'Total Crop Produced by Every Country')"
            ]
          },
          "metadata": {},
          "execution_count": 86
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1800x720 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Now we can do a correlation coeffcient test to determine the relationship between temperature and meat production globally."
      ],
      "metadata": {
        "id": "n6JIZy1uiOtu"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "r, p_value = pearsonr(temp_drop[\"Value\"], meat_produced_pivoted[\"Yearly Total\"])\n",
        "print('Correlation: {}'.format(r))\n",
        "print('P value: {}'.format(p_value))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "UteQodSfnAUG",
        "outputId": "5370896a-1724-4b11-9810-30d0a412f260"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Correlation: 0.8877537204738554\n",
            "P value: 1.6103032818631664e-20\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "This is extremely strongly correlated with a very close to one correlation coeffficient. Additionally, the P value here is very strong too, being extremely close to 0. ***We can conclude with high confidence that there is a positively direct correlation between the increase in global temperature and the global meat production.***"
      ],
      "metadata": {
        "id": "BJVJKChGo2j4"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "r, p_value = pearsonr(temp_drop1[\"Value\"], crop_yield_pivot[\"Yearly Total\"])\n",
        "print('Correlation: {}'.format(r))\n",
        "print('P value: {}'.format(p_value))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7RVguc5fqlES",
        "outputId": "41067f64-1505-4f05-fb11-66819b5e0225"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Correlation: 0.7477125279038662\n",
            "P value: 5.712636517164222e-07\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "This is a strongly correlated relatinonship with a very close to one correlation coeffficient. Additionally, the P value here is very strong too, being very close to 0. ***We can conclude with high confidence that there is a positively direct correlation between the increase in global temperature and the global crop production.***"
      ],
      "metadata": {
        "id": "MrocuDF5rBy6"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "#Alternative Hypothesis and Correlation\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "Correlation does not mean causation.\n",
        "\n",
        "I believe that another potential explaination for the increase in food production is the exponentially growing global population.\n",
        "\n",
        "Let us test that out.\n",
        "\n",
        "Here is a dataset for world population from 1960 to 2018 - https://www.kaggle.com/datasets/imdevskp/world-population-19602018\n",
        "\n",
        "I wish it was from somewhere more reliable than Kaggle, but it'll do since world population is readily avaible is most places"
      ],
      "metadata": {
        "id": "9ZKdaitnr23j"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "link = 'https://drive.google.com/file/d/1Q2xtl5KJ7B1PRxdpC1GJAJJv903tViu2/view?usp=sharing' # The shareable link\n",
        "id = '1Q2xtl5KJ7B1PRxdpC1GJAJJv903tViu2' # After the /d/ and before the /view?\n",
        "downloaded = drive.CreateFile({'id':id})\n",
        "downloaded.GetContentFile('population_total_long.csv')  # Put the name of the file here\n",
        "world_pop = pd.read_csv('population_total_long.csv') # and here"
      ],
      "metadata": {
        "id": "QM-mSWr2toj5"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "world_pop.shape\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zgo8U_XHtr7a",
        "outputId": "df8ed008-0447-49d9-8926-a2c47f7a2207"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(12595, 3)"
            ]
          },
          "metadata": {},
          "execution_count": 93
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "world_pop.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "4uRBB0APu0Pn",
        "outputId": "35f147bd-6819-4511-b82c-f93c6ee2c2b3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "  Country Name  Year    Count\n",
              "0        Aruba  1960    54211\n",
              "1  Afghanistan  1960  8996973\n",
              "2       Angola  1960  5454933\n",
              "3      Albania  1960  1608800\n",
              "4      Andorra  1960    13411"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-fd622c7b-92c0-47d8-b2c5-debe13f1d701\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Country Name</th>\n",
              "      <th>Year</th>\n",
              "      <th>Count</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Aruba</td>\n",
              "      <td>1960</td>\n",
              "      <td>54211</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Afghanistan</td>\n",
              "      <td>1960</td>\n",
              "      <td>8996973</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Angola</td>\n",
              "      <td>1960</td>\n",
              "      <td>5454933</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Albania</td>\n",
              "      <td>1960</td>\n",
              "      <td>1608800</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Andorra</td>\n",
              "      <td>1960</td>\n",
              "      <td>13411</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-fd622c7b-92c0-47d8-b2c5-debe13f1d701')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-fd622c7b-92c0-47d8-b2c5-debe13f1d701 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-fd622c7b-92c0-47d8-b2c5-debe13f1d701');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 94
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "world_pop.tail()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "YoaoBBg-u2WP",
        "outputId": "1dcc477b-6234-4e39-8920-940ddb13a242"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       Country Name  Year     Count\n",
              "12590        Kosovo  2017   1830700\n",
              "12591   Yemen, Rep.  2017  27834821\n",
              "12592  South Africa  2017  57000451\n",
              "12593        Zambia  2017  16853688\n",
              "12594      Zimbabwe  2017  14236745"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-eef827a0-ee30-46d5-8691-fc1ffcdf4e22\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Country Name</th>\n",
              "      <th>Year</th>\n",
              "      <th>Count</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>12590</th>\n",
              "      <td>Kosovo</td>\n",
              "      <td>2017</td>\n",
              "      <td>1830700</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12591</th>\n",
              "      <td>Yemen, Rep.</td>\n",
              "      <td>2017</td>\n",
              "      <td>27834821</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12592</th>\n",
              "      <td>South Africa</td>\n",
              "      <td>2017</td>\n",
              "      <td>57000451</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12593</th>\n",
              "      <td>Zambia</td>\n",
              "      <td>2017</td>\n",
              "      <td>16853688</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12594</th>\n",
              "      <td>Zimbabwe</td>\n",
              "      <td>2017</td>\n",
              "      <td>14236745</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-eef827a0-ee30-46d5-8691-fc1ffcdf4e22')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-eef827a0-ee30-46d5-8691-fc1ffcdf4e22 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-eef827a0-ee30-46d5-8691-fc1ffcdf4e22');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 95
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "world_pop = pd.pivot_table(world_pop,index='Year',columns='Country Name',values='Count',aggfunc='sum')"
      ],
      "metadata": {
        "id": "P-Ykp7mNvBBi"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "world_pop.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 328
        },
        "id": "RCSLY4u3vGgH",
        "outputId": "7c102022-bfeb-46d0-9709-0a53e6ccd801"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Country Name  Afghanistan    Albania     Algeria  American Samoa  Andorra  \\\n",
              "Year                                                                        \n",
              "1960            8996973.0  1608800.0  11057863.0         20123.0  13411.0   \n",
              "1961            9169410.0  1659800.0  11336339.0         20602.0  14375.0   \n",
              "1962            9351441.0  1711319.0  11619828.0         21253.0  15370.0   \n",
              "1963            9543205.0  1762621.0  11912803.0         22034.0  16412.0   \n",
              "1964            9744781.0  1814135.0  12221675.0         22854.0  17469.0   \n",
              "\n",
              "Country Name     Angola  Antigua and Barbuda   Argentina    Armenia    Aruba  \\\n",
              "Year                                                                           \n",
              "1960          5454933.0              54131.0  20481779.0  1874121.0  54211.0   \n",
              "1961          5531472.0              55001.0  20817266.0  1941492.0  55438.0   \n",
              "1962          5608539.0              55841.0  21153052.0  2009526.0  56225.0   \n",
              "1963          5679458.0              56702.0  21488912.0  2077578.0  56695.0   \n",
              "1964          5735044.0              57641.0  21824425.0  2145001.0  57032.0   \n",
              "\n",
              "Country Name  ...    Uruguay  Uzbekistan  Vanuatu  Venezuela, RB     Vietnam  \\\n",
              "Year          ...                                                              \n",
              "1960          ...  2538643.0   8526300.0  63689.0      8141841.0  32670039.0   \n",
              "1961          ...  2571681.0   8813616.0  65705.0      8439261.0  33666110.0   \n",
              "1962          ...  2603882.0   9113620.0  67794.0      8742777.0  34683407.0   \n",
              "1963          ...  2635126.0   9428906.0  69946.0      9052635.0  35721217.0   \n",
              "1964          ...  2665388.0   9762816.0  72115.0      9369096.0  36779999.0   \n",
              "\n",
              "Country Name  Virgin Islands (U.S.)  West Bank and Gaza  Yemen, Rep.  \\\n",
              "Year                                                                   \n",
              "1960                        32500.0                 NaN    5315355.0   \n",
              "1961                        34300.0                 NaN    5393036.0   \n",
              "1962                        35000.0                 NaN    5473671.0   \n",
              "1963                        39800.0                 NaN    5556766.0   \n",
              "1964                        40800.0                 NaN    5641597.0   \n",
              "\n",
              "Country Name     Zambia   Zimbabwe  \n",
              "Year                                \n",
              "1960          3070776.0  3776681.0  \n",
              "1961          3164329.0  3905034.0  \n",
              "1962          3260650.0  4039201.0  \n",
              "1963          3360104.0  4178726.0  \n",
              "1964          3463213.0  4322861.0  \n",
              "\n",
              "[5 rows x 219 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-0382bb6b-2d03-472e-a718-023694461554\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th>Country Name</th>\n",
              "      <th>Afghanistan</th>\n",
              "      <th>Albania</th>\n",
              "      <th>Algeria</th>\n",
              "      <th>American Samoa</th>\n",
              "      <th>Andorra</th>\n",
              "      <th>Angola</th>\n",
              "      <th>Antigua and Barbuda</th>\n",
              "      <th>Argentina</th>\n",
              "      <th>Armenia</th>\n",
              "      <th>Aruba</th>\n",
              "      <th>...</th>\n",
              "      <th>Uruguay</th>\n",
              "      <th>Uzbekistan</th>\n",
              "      <th>Vanuatu</th>\n",
              "      <th>Venezuela, RB</th>\n",
              "      <th>Vietnam</th>\n",
              "      <th>Virgin Islands (U.S.)</th>\n",
              "      <th>West Bank and Gaza</th>\n",
              "      <th>Yemen, Rep.</th>\n",
              "      <th>Zambia</th>\n",
              "      <th>Zimbabwe</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Year</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1960</th>\n",
              "      <td>8996973.0</td>\n",
              "      <td>1608800.0</td>\n",
              "      <td>11057863.0</td>\n",
              "      <td>20123.0</td>\n",
              "      <td>13411.0</td>\n",
              "      <td>5454933.0</td>\n",
              "      <td>54131.0</td>\n",
              "      <td>20481779.0</td>\n",
              "      <td>1874121.0</td>\n",
              "      <td>54211.0</td>\n",
              "      <td>...</td>\n",
              "      <td>2538643.0</td>\n",
              "      <td>8526300.0</td>\n",
              "      <td>63689.0</td>\n",
              "      <td>8141841.0</td>\n",
              "      <td>32670039.0</td>\n",
              "      <td>32500.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>5315355.0</td>\n",
              "      <td>3070776.0</td>\n",
              "      <td>3776681.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1961</th>\n",
              "      <td>9169410.0</td>\n",
              "      <td>1659800.0</td>\n",
              "      <td>11336339.0</td>\n",
              "      <td>20602.0</td>\n",
              "      <td>14375.0</td>\n",
              "      <td>5531472.0</td>\n",
              "      <td>55001.0</td>\n",
              "      <td>20817266.0</td>\n",
              "      <td>1941492.0</td>\n",
              "      <td>55438.0</td>\n",
              "      <td>...</td>\n",
              "      <td>2571681.0</td>\n",
              "      <td>8813616.0</td>\n",
              "      <td>65705.0</td>\n",
              "      <td>8439261.0</td>\n",
              "      <td>33666110.0</td>\n",
              "      <td>34300.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>5393036.0</td>\n",
              "      <td>3164329.0</td>\n",
              "      <td>3905034.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1962</th>\n",
              "      <td>9351441.0</td>\n",
              "      <td>1711319.0</td>\n",
              "      <td>11619828.0</td>\n",
              "      <td>21253.0</td>\n",
              "      <td>15370.0</td>\n",
              "      <td>5608539.0</td>\n",
              "      <td>55841.0</td>\n",
              "      <td>21153052.0</td>\n",
              "      <td>2009526.0</td>\n",
              "      <td>56225.0</td>\n",
              "      <td>...</td>\n",
              "      <td>2603882.0</td>\n",
              "      <td>9113620.0</td>\n",
              "      <td>67794.0</td>\n",
              "      <td>8742777.0</td>\n",
              "      <td>34683407.0</td>\n",
              "      <td>35000.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>5473671.0</td>\n",
              "      <td>3260650.0</td>\n",
              "      <td>4039201.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1963</th>\n",
              "      <td>9543205.0</td>\n",
              "      <td>1762621.0</td>\n",
              "      <td>11912803.0</td>\n",
              "      <td>22034.0</td>\n",
              "      <td>16412.0</td>\n",
              "      <td>5679458.0</td>\n",
              "      <td>56702.0</td>\n",
              "      <td>21488912.0</td>\n",
              "      <td>2077578.0</td>\n",
              "      <td>56695.0</td>\n",
              "      <td>...</td>\n",
              "      <td>2635126.0</td>\n",
              "      <td>9428906.0</td>\n",
              "      <td>69946.0</td>\n",
              "      <td>9052635.0</td>\n",
              "      <td>35721217.0</td>\n",
              "      <td>39800.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>5556766.0</td>\n",
              "      <td>3360104.0</td>\n",
              "      <td>4178726.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1964</th>\n",
              "      <td>9744781.0</td>\n",
              "      <td>1814135.0</td>\n",
              "      <td>12221675.0</td>\n",
              "      <td>22854.0</td>\n",
              "      <td>17469.0</td>\n",
              "      <td>5735044.0</td>\n",
              "      <td>57641.0</td>\n",
              "      <td>21824425.0</td>\n",
              "      <td>2145001.0</td>\n",
              "      <td>57032.0</td>\n",
              "      <td>...</td>\n",
              "      <td>2665388.0</td>\n",
              "      <td>9762816.0</td>\n",
              "      <td>72115.0</td>\n",
              "      <td>9369096.0</td>\n",
              "      <td>36779999.0</td>\n",
              "      <td>40800.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>5641597.0</td>\n",
              "      <td>3463213.0</td>\n",
              "      <td>4322861.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows Ã 219 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-0382bb6b-2d03-472e-a718-023694461554')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-0382bb6b-2d03-472e-a718-023694461554 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-0382bb6b-2d03-472e-a718-023694461554');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 97
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "world_pop.tail()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 328
        },
        "id": "wDbBjyrivIJm",
        "outputId": "fbeaf94c-ff48-4307-8af6-0c774e6abda3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Country Name  Afghanistan    Albania     Algeria  American Samoa  Andorra  \\\n",
              "Year                                                                        \n",
              "2013           32269589.0  2895092.0  38140132.0         55713.0  80774.0   \n",
              "2014           33370794.0  2889104.0  38923687.0         55791.0  79213.0   \n",
              "2015           34413603.0  2880703.0  39728025.0         55812.0  78011.0   \n",
              "2016           35383128.0  2876101.0  40551404.0         55741.0  77297.0   \n",
              "2017           36296400.0  2873457.0  41389198.0         55620.0  77001.0   \n",
              "\n",
              "Country Name      Angola  Antigua and Barbuda   Argentina    Armenia  \\\n",
              "Year                                                                   \n",
              "2013          26015780.0              91516.0  42202935.0  2897584.0   \n",
              "2014          26941779.0              92562.0  42669500.0  2912403.0   \n",
              "2015          27884381.0              93566.0  43131966.0  2925553.0   \n",
              "2016          28842484.0              94527.0  43590368.0  2936146.0   \n",
              "2017          29816748.0              95426.0  44044811.0  2944809.0   \n",
              "\n",
              "Country Name     Aruba  ...    Uruguay  Uzbekistan   Vanuatu  Venezuela, RB  \\\n",
              "Year                    ...                                                   \n",
              "2013          103159.0  ...  3389439.0  30243200.0  256635.0     29783571.0   \n",
              "2014          103774.0  ...  3400434.0  30757700.0  263888.0     30045134.0   \n",
              "2015          104341.0  ...  3412009.0  31298900.0  271130.0     30081829.0   \n",
              "2016          104872.0  ...  3424132.0  31847900.0  278330.0     29846179.0   \n",
              "2017          105366.0  ...  3436646.0  32388600.0  285510.0     29390409.0   \n",
              "\n",
              "Country Name     Vietnam  Virgin Islands (U.S.)  West Bank and Gaza  \\\n",
              "Year                                                                  \n",
              "2013          90753472.0               108044.0           4076708.0   \n",
              "2014          91714595.0               107884.0           4173398.0   \n",
              "2015          92677076.0               107710.0           4270092.0   \n",
              "2016          93638724.0               107510.0           4367088.0   \n",
              "2017          94596642.0               107268.0           4454805.0   \n",
              "\n",
              "Country Name  Yemen, Rep.      Zambia    Zimbabwe  \n",
              "Year                                               \n",
              "2013           25147109.0  14926504.0  13350356.0  \n",
              "2014           25823485.0  15399753.0  13586681.0  \n",
              "2015           26497889.0  15879361.0  13814629.0  \n",
              "2016           27168210.0  16363507.0  14030390.0  \n",
              "2017           27834821.0  16853688.0  14236745.0  \n",
              "\n",
              "[5 rows x 219 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-131a8d03-d5e5-4959-ac06-b7cc786906f7\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th>Country Name</th>\n",
              "      <th>Afghanistan</th>\n",
              "      <th>Albania</th>\n",
              "      <th>Algeria</th>\n",
              "      <th>American Samoa</th>\n",
              "      <th>Andorra</th>\n",
              "      <th>Angola</th>\n",
              "      <th>Antigua and Barbuda</th>\n",
              "      <th>Argentina</th>\n",
              "      <th>Armenia</th>\n",
              "      <th>Aruba</th>\n",
              "      <th>...</th>\n",
              "      <th>Uruguay</th>\n",
              "      <th>Uzbekistan</th>\n",
              "      <th>Vanuatu</th>\n",
              "      <th>Venezuela, RB</th>\n",
              "      <th>Vietnam</th>\n",
              "      <th>Virgin Islands (U.S.)</th>\n",
              "      <th>West Bank and Gaza</th>\n",
              "      <th>Yemen, Rep.</th>\n",
              "      <th>Zambia</th>\n",
              "      <th>Zimbabwe</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Year</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2013</th>\n",
              "      <td>32269589.0</td>\n",
              "      <td>2895092.0</td>\n",
              "      <td>38140132.0</td>\n",
              "      <td>55713.0</td>\n",
              "      <td>80774.0</td>\n",
              "      <td>26015780.0</td>\n",
              "      <td>91516.0</td>\n",
              "      <td>42202935.0</td>\n",
              "      <td>2897584.0</td>\n",
              "      <td>103159.0</td>\n",
              "      <td>...</td>\n",
              "      <td>3389439.0</td>\n",
              "      <td>30243200.0</td>\n",
              "      <td>256635.0</td>\n",
              "      <td>29783571.0</td>\n",
              "      <td>90753472.0</td>\n",
              "      <td>108044.0</td>\n",
              "      <td>4076708.0</td>\n",
              "      <td>25147109.0</td>\n",
              "      <td>14926504.0</td>\n",
              "      <td>13350356.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2014</th>\n",
              "      <td>33370794.0</td>\n",
              "      <td>2889104.0</td>\n",
              "      <td>38923687.0</td>\n",
              "      <td>55791.0</td>\n",
              "      <td>79213.0</td>\n",
              "      <td>26941779.0</td>\n",
              "      <td>92562.0</td>\n",
              "      <td>42669500.0</td>\n",
              "      <td>2912403.0</td>\n",
              "      <td>103774.0</td>\n",
              "      <td>...</td>\n",
              "      <td>3400434.0</td>\n",
              "      <td>30757700.0</td>\n",
              "      <td>263888.0</td>\n",
              "      <td>30045134.0</td>\n",
              "      <td>91714595.0</td>\n",
              "      <td>107884.0</td>\n",
              "      <td>4173398.0</td>\n",
              "      <td>25823485.0</td>\n",
              "      <td>15399753.0</td>\n",
              "      <td>13586681.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2015</th>\n",
              "      <td>34413603.0</td>\n",
              "      <td>2880703.0</td>\n",
              "      <td>39728025.0</td>\n",
              "      <td>55812.0</td>\n",
              "      <td>78011.0</td>\n",
              "      <td>27884381.0</td>\n",
              "      <td>93566.0</td>\n",
              "      <td>43131966.0</td>\n",
              "      <td>2925553.0</td>\n",
              "      <td>104341.0</td>\n",
              "      <td>...</td>\n",
              "      <td>3412009.0</td>\n",
              "      <td>31298900.0</td>\n",
              "      <td>271130.0</td>\n",
              "      <td>30081829.0</td>\n",
              "      <td>92677076.0</td>\n",
              "      <td>107710.0</td>\n",
              "      <td>4270092.0</td>\n",
              "      <td>26497889.0</td>\n",
              "      <td>15879361.0</td>\n",
              "      <td>13814629.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2016</th>\n",
              "      <td>35383128.0</td>\n",
              "      <td>2876101.0</td>\n",
              "      <td>40551404.0</td>\n",
              "      <td>55741.0</td>\n",
              "      <td>77297.0</td>\n",
              "      <td>28842484.0</td>\n",
              "      <td>94527.0</td>\n",
              "      <td>43590368.0</td>\n",
              "      <td>2936146.0</td>\n",
              "      <td>104872.0</td>\n",
              "      <td>...</td>\n",
              "      <td>3424132.0</td>\n",
              "      <td>31847900.0</td>\n",
              "      <td>278330.0</td>\n",
              "      <td>29846179.0</td>\n",
              "      <td>93638724.0</td>\n",
              "      <td>107510.0</td>\n",
              "      <td>4367088.0</td>\n",
              "      <td>27168210.0</td>\n",
              "      <td>16363507.0</td>\n",
              "      <td>14030390.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2017</th>\n",
              "      <td>36296400.0</td>\n",
              "      <td>2873457.0</td>\n",
              "      <td>41389198.0</td>\n",
              "      <td>55620.0</td>\n",
              "      <td>77001.0</td>\n",
              "      <td>29816748.0</td>\n",
              "      <td>95426.0</td>\n",
              "      <td>44044811.0</td>\n",
              "      <td>2944809.0</td>\n",
              "      <td>105366.0</td>\n",
              "      <td>...</td>\n",
              "      <td>3436646.0</td>\n",
              "      <td>32388600.0</td>\n",
              "      <td>285510.0</td>\n",
              "      <td>29390409.0</td>\n",
              "      <td>94596642.0</td>\n",
              "      <td>107268.0</td>\n",
              "      <td>4454805.0</td>\n",
              "      <td>27834821.0</td>\n",
              "      <td>16853688.0</td>\n",
              "      <td>14236745.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows Ã 219 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-131a8d03-d5e5-4959-ac06-b7cc786906f7')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-131a8d03-d5e5-4959-ac06-b7cc786906f7 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-131a8d03-d5e5-4959-ac06-b7cc786906f7');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 98
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "world_pop[\"Total Population\"] = world_pop.sum(axis=1)"
      ],
      "metadata": {
        "id": "qz9EfBxevKtr"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "sb.set(rc = {'figure.figsize':(25,10)})\n",
        "p = sb.scatterplot(data=world_pop, x=\"Year\", y=\"Total Population\")\n",
        "p.set_xlabel(\"Year\", fontsize = 20)\n",
        "p.set_ylabel(\"World Population\", fontsize = 20)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 646
        },
        "id": "bq5brAdMwix4",
        "outputId": "526bef67-29ec-4062-8c63-65215357c583"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0, 0.5, 'World Population')"
            ]
          },
          "metadata": {},
          "execution_count": 100
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1800x720 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Very expected population growth rate. Now let us see if its correlated to food production for both meat and crop production."
      ],
      "metadata": {
        "id": "tX_rXbVVyRRT"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "r, p_value = pearsonr(world_pop[\"Total Population\"] , meat_produced_pivoted[\"Yearly Total\"])\n",
        "print('Correlation: {}'.format(r))\n",
        "print('P value: {}'.format(p_value))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "VLj6-GuXy7pn",
        "outputId": "fe2a728e-cc4f-45b2-fa9f-a63d16ce3fe1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Correlation: 0.9944759449631455\n",
            "P value: 1.6093854234652405e-56\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Not only is this so much more correlated, and its p value is so much closer to 0, but we actually have an explaination for it.\n",
        "\n",
        "The increase in meat production to supply the global population makes so much more sense than just rising temperature overall impacting meat production; more population means more meat needs to be produced to feed them.\n",
        "\n",
        "We can do another investigation to see if the rising population is causing TWO things, or a form of reverse multiple causation. In this case, increase in population is causing two things, increase in temperature and increase in meat production.\n",
        "\n",
        "Let's run a Pearson's correelation coefficient on crop production. We need to drop values until 1990 so the timeset matches the global population."
      ],
      "metadata": {
        "id": "VOp8MzHJ4SXt"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "world_pop_drop = world_pop\n",
        "for i in range(30):\n",
        "  world_pop_drop = world_pop_drop.iloc[1: , :]"
      ],
      "metadata": {
        "id": "6Mggl0e44REG"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "len(world_pop_drop.index)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "JW27HvJO6r0L",
        "outputId": "fa8b485e-97dd-4650-8a96-e5b58d3493e8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "28"
            ]
          },
          "metadata": {},
          "execution_count": 103
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "world_pop_drop"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "Xdwc-DlP646a",
        "outputId": "8a05b59d-b3e7-4818-b570-a3ab6393f5bb"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Country Name  Afghanistan    Albania     Algeria  American Samoa  Andorra  \\\n",
              "Year                                                                        \n",
              "1990           12412308.0  3286542.0  25758869.0         47347.0  54509.0   \n",
              "1991           13299017.0  3266790.0  26400479.0         48685.0  56671.0   \n",
              "1992           14485546.0  3247039.0  27028326.0         49896.0  58888.0   \n",
              "1993           15816603.0  3227287.0  27635515.0         51020.0  60971.0   \n",
              "1994           17075727.0  3207536.0  28213774.0         52095.0  62677.0   \n",
              "1995           18110657.0  3187784.0  28757785.0         53161.0  63850.0   \n",
              "1996           18853437.0  3168033.0  29266405.0         54211.0  64360.0   \n",
              "1997           19357126.0  3148281.0  29742979.0         55221.0  64327.0   \n",
              "1998           19737765.0  3128530.0  30192754.0         56171.0  64142.0   \n",
              "1999           20170844.0  3108778.0  30623406.0         57053.0  64370.0   \n",
              "2000           20779953.0  3089027.0  31042235.0         57821.0  65390.0   \n",
              "2001           21606988.0  3060173.0  31451514.0         58494.0  67341.0   \n",
              "2002           22600770.0  3051010.0  31855109.0         59080.0  70049.0   \n",
              "2003           23680871.0  3039616.0  32264157.0         59504.0  73182.0   \n",
              "2004           24726684.0  3026939.0  32692163.0         59681.0  76244.0   \n",
              "2005           25654277.0  3011487.0  33149724.0         59562.0  78867.0   \n",
              "2006           26433049.0  2992547.0  33641002.0         59107.0  80993.0   \n",
              "2007           27100536.0  2970017.0  34166972.0         58365.0  82684.0   \n",
              "2008           27722276.0  2947314.0  34730608.0         57492.0  83862.0   \n",
              "2009           28394813.0  2927519.0  35333881.0         56683.0  84463.0   \n",
              "2010           29185507.0  2913021.0  35977455.0         56079.0  84449.0   \n",
              "2011           30117413.0  2905195.0  36661444.0         55759.0  83747.0   \n",
              "2012           31161376.0  2900401.0  37383887.0         55667.0  82427.0   \n",
              "2013           32269589.0  2895092.0  38140132.0         55713.0  80774.0   \n",
              "2014           33370794.0  2889104.0  38923687.0         55791.0  79213.0   \n",
              "2015           34413603.0  2880703.0  39728025.0         55812.0  78011.0   \n",
              "2016           35383128.0  2876101.0  40551404.0         55741.0  77297.0   \n",
              "2017           36296400.0  2873457.0  41389198.0         55620.0  77001.0   \n",
              "\n",
              "Country Name      Angola  Antigua and Barbuda   Argentina    Armenia  \\\n",
              "Year                                                                   \n",
              "1990          11848386.0              62528.0  32618651.0  3538171.0   \n",
              "1991          12248901.0              63367.0  33079000.0  3505258.0   \n",
              "1992          12657366.0              64471.0  33529326.0  3442817.0   \n",
              "1993          13075049.0              65777.0  33970111.0  3363108.0   \n",
              "1994          13503747.0              67204.0  34402672.0  3283667.0   \n",
              "1995          13945206.0              68670.0  34828170.0  3217348.0   \n",
              "1996          14400719.0              70173.0  35246374.0  3168221.0   \n",
              "1997          14871570.0              71704.0  35657429.0  3133089.0   \n",
              "1998          15359601.0              73224.0  36063459.0  3108687.0   \n",
              "1999          15866869.0              74674.0  36467218.0  3089022.0   \n",
              "2000          16395473.0              76016.0  36870787.0  3069591.0   \n",
              "2001          16945753.0              77212.0  37275652.0  3050687.0   \n",
              "2002          17519417.0              78295.0  37681749.0  3033978.0   \n",
              "2003          18121479.0              79300.0  38087868.0  3017932.0   \n",
              "2004          18758145.0              80336.0  38491972.0  3000720.0   \n",
              "2005          19433602.0              81465.0  38892931.0  2981269.0   \n",
              "2006          20149901.0              82704.0  39289878.0  2958307.0   \n",
              "2007          20905363.0              84026.0  39684295.0  2932618.0   \n",
              "2008          21695634.0              85397.0  40080160.0  2907618.0   \n",
              "2009          22514281.0              86746.0  40482788.0  2888092.0   \n",
              "2010          23356246.0              88028.0  40788453.0  2877319.0   \n",
              "2011          24220661.0              89253.0  41261490.0  2876538.0   \n",
              "2012          25107931.0              90409.0  41733271.0  2884229.0   \n",
              "2013          26015780.0              91516.0  42202935.0  2897584.0   \n",
              "2014          26941779.0              92562.0  42669500.0  2912403.0   \n",
              "2015          27884381.0              93566.0  43131966.0  2925553.0   \n",
              "2016          28842484.0              94527.0  43590368.0  2936146.0   \n",
              "2017          29816748.0              95426.0  44044811.0  2944809.0   \n",
              "\n",
              "Country Name     Aruba  ...  Uzbekistan   Vanuatu  Venezuela, RB     Vietnam  \\\n",
              "Year                    ...                                                    \n",
              "1990           62149.0  ...  20510000.0  146573.0     19632665.0  67988862.0   \n",
              "1991           64622.0  ...  20952000.0  150716.0     20096317.0  69436954.0   \n",
              "1992           68235.0  ...  21449000.0  155170.0     20557683.0  70883481.0   \n",
              "1993           72504.0  ...  21942000.0  159744.0     21016901.0  72300308.0   \n",
              "1994           76700.0  ...  22377000.0  164129.0     21474549.0  73651218.0   \n",
              "1995           80324.0  ...  22785000.0  168158.0     21931084.0  74910461.0   \n",
              "1996           83200.0  ...  23225000.0  171722.0     22385650.0  76068743.0   \n",
              "1997           85451.0  ...  23667000.0  174921.0     22837743.0  77133214.0   \n",
              "1998           87277.0  ...  24051000.0  177987.0     23288564.0  78115710.0   \n",
              "1999           89005.0  ...  24311650.0  181265.0     23739841.0  79035871.0   \n",
              "2000           90853.0  ...  24650400.0  184972.0     24192446.0  79910412.0   \n",
              "2001           92898.0  ...  24964450.0  189219.0     24646472.0  80742499.0   \n",
              "2002           94992.0  ...  25271850.0  193920.0     25100408.0  81534407.0   \n",
              "2003           97017.0  ...  25567650.0  198959.0     25551624.0  82301656.0   \n",
              "2004           98737.0  ...  25864350.0  204127.0     25996594.0  83062821.0   \n",
              "2005          100031.0  ...  26167000.0  209282.0     26432447.0  83832661.0   \n",
              "2006          100834.0  ...  26488250.0  214370.0     26850194.0  84617540.0   \n",
              "2007          101222.0  ...  26868000.0  219472.0     27247610.0  85419591.0   \n",
              "2008          101358.0  ...  27302800.0  224704.0     27635832.0  86243413.0   \n",
              "2009          101455.0  ...  27767400.0  230247.0     28031009.0  87092252.0   \n",
              "2010          101669.0  ...  28562400.0  236211.0     28439940.0  87967651.0   \n",
              "2011          102046.0  ...  29339400.0  242653.0     28888369.0  88871561.0   \n",
              "2012          102560.0  ...  29774500.0  249499.0     29362449.0  89802487.0   \n",
              "2013          103159.0  ...  30243200.0  256635.0     29783571.0  90753472.0   \n",
              "2014          103774.0  ...  30757700.0  263888.0     30045134.0  91714595.0   \n",
              "2015          104341.0  ...  31298900.0  271130.0     30081829.0  92677076.0   \n",
              "2016          104872.0  ...  31847900.0  278330.0     29846179.0  93638724.0   \n",
              "2017          105366.0  ...  32388600.0  285510.0     29390409.0  94596642.0   \n",
              "\n",
              "Country Name  Virgin Islands (U.S.)  West Bank and Gaza  Yemen, Rep.  \\\n",
              "Year                                                                   \n",
              "1990                       103963.0           1978248.0   11709993.0   \n",
              "1991                       104807.0           2068845.0   12302124.0   \n",
              "1992                       105712.0           2163591.0   12954155.0   \n",
              "1993                       106578.0           2262676.0   13634076.0   \n",
              "1994                       107318.0           2366298.0   14297613.0   \n",
              "1995                       107818.0           2474666.0   14913315.0   \n",
              "1996                       108095.0           2587997.0   15469274.0   \n",
              "1997                       108357.0           2706518.0   15975668.0   \n",
              "1998                       108537.0           2776568.0   16450310.0   \n",
              "1999                       108599.0           2848431.0   16921149.0   \n",
              "2000                       108642.0           2922153.0   17409072.0   \n",
              "2001                       108549.0           2997784.0   17918373.0   \n",
              "2002                       108510.0           3075373.0   18443691.0   \n",
              "2003                       108506.0           3154969.0   18985000.0   \n",
              "2004                       108467.0           3236626.0   19540098.0   \n",
              "2005                       108454.0           3320396.0   20107409.0   \n",
              "2006                       108371.0           3406334.0   20687646.0   \n",
              "2007                       108339.0           3494496.0   21282515.0   \n",
              "2008                       108399.0           3591977.0   21892146.0   \n",
              "2009                       108405.0           3689099.0   22516460.0   \n",
              "2010                       108358.0           3786161.0   23154855.0   \n",
              "2011                       108292.0           3882986.0   23807588.0   \n",
              "2012                       108191.0           3979998.0   24473178.0   \n",
              "2013                       108044.0           4076708.0   25147109.0   \n",
              "2014                       107884.0           4173398.0   25823485.0   \n",
              "2015                       107710.0           4270092.0   26497889.0   \n",
              "2016                       107510.0           4367088.0   27168210.0   \n",
              "2017                       107268.0           4454805.0   27834821.0   \n",
              "\n",
              "Country Name      Zambia    Zimbabwe  Total Population  \n",
              "Year                                                    \n",
              "1990           8036845.0  10432421.0      5.268765e+09  \n",
              "1991           8246656.0  10680995.0      5.356486e+09  \n",
              "1992           8451347.0  10900502.0      5.440572e+09  \n",
              "1993           8656486.0  11092766.0      5.525527e+09  \n",
              "1994           8869740.0  11261744.0      5.609538e+09  \n",
              "1995           9096607.0  11410714.0      5.694398e+09  \n",
              "1996           9339733.0  11541217.0      5.777230e+09  \n",
              "1997           9597609.0  11653242.0      5.859744e+09  \n",
              "1998           9866476.0  11747072.0      5.941318e+09  \n",
              "1999          10140561.0  11822719.0      6.021685e+09  \n",
              "2000          10415944.0  11881477.0      6.101412e+09  \n",
              "2001          10692193.0  11923914.0      6.180664e+09  \n",
              "2002          10971698.0  11954290.0      6.259680e+09  \n",
              "2003          11256743.0  11982224.0      6.338802e+09  \n",
              "2004          11550642.0  12019912.0      6.418482e+09  \n",
              "2005          11856247.0  12076699.0      6.498698e+09  \n",
              "2006          12173514.0  12155491.0      6.579698e+09  \n",
              "2007          12502958.0  12255922.0      6.661191e+09  \n",
              "2008          12848530.0  12379549.0      6.743929e+09  \n",
              "2009          13215139.0  12526968.0      6.826634e+09  \n",
              "2010          13605984.0  12697723.0      6.908997e+09  \n",
              "2011          14023193.0  12894316.0      6.990095e+09  \n",
              "2012          14465121.0  13115131.0      7.069823e+09  \n",
              "2013          14926504.0  13350356.0      7.153755e+09  \n",
              "2014          15399753.0  13586681.0      7.238449e+09  \n",
              "2015          15879361.0  13814629.0      7.323322e+09  \n",
              "2016          16363507.0  14030390.0      7.408876e+09  \n",
              "2017          16853688.0  14236745.0      7.493762e+09  \n",
              "\n",
              "[28 rows x 220 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-885b0f1e-8c66-4e09-bee8-28a1b295adbe\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th>Country Name</th>\n",
              "      <th>Afghanistan</th>\n",
              "      <th>Albania</th>\n",
              "      <th>Algeria</th>\n",
              "      <th>American Samoa</th>\n",
              "      <th>Andorra</th>\n",
              "      <th>Angola</th>\n",
              "      <th>Antigua and Barbuda</th>\n",
              "      <th>Argentina</th>\n",
              "      <th>Armenia</th>\n",
              "      <th>Aruba</th>\n",
              "      <th>...</th>\n",
              "      <th>Uzbekistan</th>\n",
              "      <th>Vanuatu</th>\n",
              "      <th>Venezuela, RB</th>\n",
              "      <th>Vietnam</th>\n",
              "      <th>Virgin Islands (U.S.)</th>\n",
              "      <th>West Bank and Gaza</th>\n",
              "      <th>Yemen, Rep.</th>\n",
              "      <th>Zambia</th>\n",
              "      <th>Zimbabwe</th>\n",
              "      <th>Total Population</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Year</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1990</th>\n",
              "      <td>12412308.0</td>\n",
              "      <td>3286542.0</td>\n",
              "      <td>25758869.0</td>\n",
              "      <td>47347.0</td>\n",
              "      <td>54509.0</td>\n",
              "      <td>11848386.0</td>\n",
              "      <td>62528.0</td>\n",
              "      <td>32618651.0</td>\n",
              "      <td>3538171.0</td>\n",
              "      <td>62149.0</td>\n",
              "      <td>...</td>\n",
              "      <td>20510000.0</td>\n",
              "      <td>146573.0</td>\n",
              "      <td>19632665.0</td>\n",
              "      <td>67988862.0</td>\n",
              "      <td>103963.0</td>\n",
              "      <td>1978248.0</td>\n",
              "      <td>11709993.0</td>\n",
              "      <td>8036845.0</td>\n",
              "      <td>10432421.0</td>\n",
              "      <td>5.268765e+09</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1991</th>\n",
              "      <td>13299017.0</td>\n",
              "      <td>3266790.0</td>\n",
              "      <td>26400479.0</td>\n",
              "      <td>48685.0</td>\n",
              "      <td>56671.0</td>\n",
              "      <td>12248901.0</td>\n",
              "      <td>63367.0</td>\n",
              "      <td>33079000.0</td>\n",
              "      <td>3505258.0</td>\n",
              "      <td>64622.0</td>\n",
              "      <td>...</td>\n",
              "      <td>20952000.0</td>\n",
              "      <td>150716.0</td>\n",
              "      <td>20096317.0</td>\n",
              "      <td>69436954.0</td>\n",
              "      <td>104807.0</td>\n",
              "      <td>2068845.0</td>\n",
              "      <td>12302124.0</td>\n",
              "      <td>8246656.0</td>\n",
              "      <td>10680995.0</td>\n",
              "      <td>5.356486e+09</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1992</th>\n",
              "      <td>14485546.0</td>\n",
              "      <td>3247039.0</td>\n",
              "      <td>27028326.0</td>\n",
              "      <td>49896.0</td>\n",
              "      <td>58888.0</td>\n",
              "      <td>12657366.0</td>\n",
              "      <td>64471.0</td>\n",
              "      <td>33529326.0</td>\n",
              "      <td>3442817.0</td>\n",
              "      <td>68235.0</td>\n",
              "      <td>...</td>\n",
              "      <td>21449000.0</td>\n",
              "      <td>155170.0</td>\n",
              "      <td>20557683.0</td>\n",
              "      <td>70883481.0</td>\n",
              "      <td>105712.0</td>\n",
              "      <td>2163591.0</td>\n",
              "      <td>12954155.0</td>\n",
              "      <td>8451347.0</td>\n",
              "      <td>10900502.0</td>\n",
              "      <td>5.440572e+09</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1993</th>\n",
              "      <td>15816603.0</td>\n",
              "      <td>3227287.0</td>\n",
              "      <td>27635515.0</td>\n",
              "      <td>51020.0</td>\n",
              "      <td>60971.0</td>\n",
              "      <td>13075049.0</td>\n",
              "      <td>65777.0</td>\n",
              "      <td>33970111.0</td>\n",
              "      <td>3363108.0</td>\n",
              "      <td>72504.0</td>\n",
              "      <td>...</td>\n",
              "      <td>21942000.0</td>\n",
              "      <td>159744.0</td>\n",
              "      <td>21016901.0</td>\n",
              "      <td>72300308.0</td>\n",
              "      <td>106578.0</td>\n",
              "      <td>2262676.0</td>\n",
              "      <td>13634076.0</td>\n",
              "      <td>8656486.0</td>\n",
              "      <td>11092766.0</td>\n",
              "      <td>5.525527e+09</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1994</th>\n",
              "      <td>17075727.0</td>\n",
              "      <td>3207536.0</td>\n",
              "      <td>28213774.0</td>\n",
              "      <td>52095.0</td>\n",
              "      <td>62677.0</td>\n",
              "      <td>13503747.0</td>\n",
              "      <td>67204.0</td>\n",
              "      <td>34402672.0</td>\n",
              "      <td>3283667.0</td>\n",
              "      <td>76700.0</td>\n",
              "      <td>...</td>\n",
              "      <td>22377000.0</td>\n",
              "      <td>164129.0</td>\n",
              "      <td>21474549.0</td>\n",
              "      <td>73651218.0</td>\n",
              "      <td>107318.0</td>\n",
              "      <td>2366298.0</td>\n",
              "      <td>14297613.0</td>\n",
              "      <td>8869740.0</td>\n",
              "      <td>11261744.0</td>\n",
              "      <td>5.609538e+09</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1995</th>\n",
              "      <td>18110657.0</td>\n",
              "      <td>3187784.0</td>\n",
              "      <td>28757785.0</td>\n",
              "      <td>53161.0</td>\n",
              "      <td>63850.0</td>\n",
              "      <td>13945206.0</td>\n",
              "      <td>68670.0</td>\n",
              "      <td>34828170.0</td>\n",
              "      <td>3217348.0</td>\n",
              "      <td>80324.0</td>\n",
              "      <td>...</td>\n",
              "      <td>22785000.0</td>\n",
              "      <td>168158.0</td>\n",
              "      <td>21931084.0</td>\n",
              "      <td>74910461.0</td>\n",
              "      <td>107818.0</td>\n",
              "      <td>2474666.0</td>\n",
              "      <td>14913315.0</td>\n",
              "      <td>9096607.0</td>\n",
              "      <td>11410714.0</td>\n",
              "      <td>5.694398e+09</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1996</th>\n",
              "      <td>18853437.0</td>\n",
              "      <td>3168033.0</td>\n",
              "      <td>29266405.0</td>\n",
              "      <td>54211.0</td>\n",
              "      <td>64360.0</td>\n",
              "      <td>14400719.0</td>\n",
              "      <td>70173.0</td>\n",
              "      <td>35246374.0</td>\n",
              "      <td>3168221.0</td>\n",
              "      <td>83200.0</td>\n",
              "      <td>...</td>\n",
              "      <td>23225000.0</td>\n",
              "      <td>171722.0</td>\n",
              "      <td>22385650.0</td>\n",
              "      <td>76068743.0</td>\n",
              "      <td>108095.0</td>\n",
              "      <td>2587997.0</td>\n",
              "      <td>15469274.0</td>\n",
              "      <td>9339733.0</td>\n",
              "      <td>11541217.0</td>\n",
              "      <td>5.777230e+09</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1997</th>\n",
              "      <td>19357126.0</td>\n",
              "      <td>3148281.0</td>\n",
              "      <td>29742979.0</td>\n",
              "      <td>55221.0</td>\n",
              "      <td>64327.0</td>\n",
              "      <td>14871570.0</td>\n",
              "      <td>71704.0</td>\n",
              "      <td>35657429.0</td>\n",
              "      <td>3133089.0</td>\n",
              "      <td>85451.0</td>\n",
              "      <td>...</td>\n",
              "      <td>23667000.0</td>\n",
              "      <td>174921.0</td>\n",
              "      <td>22837743.0</td>\n",
              "      <td>77133214.0</td>\n",
              "      <td>108357.0</td>\n",
              "      <td>2706518.0</td>\n",
              "      <td>15975668.0</td>\n",
              "      <td>9597609.0</td>\n",
              "      <td>11653242.0</td>\n",
              "      <td>5.859744e+09</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1998</th>\n",
              "      <td>19737765.0</td>\n",
              "      <td>3128530.0</td>\n",
              "      <td>30192754.0</td>\n",
              "      <td>56171.0</td>\n",
              "      <td>64142.0</td>\n",
              "      <td>15359601.0</td>\n",
              "      <td>73224.0</td>\n",
              "      <td>36063459.0</td>\n",
              "      <td>3108687.0</td>\n",
              "      <td>87277.0</td>\n",
              "      <td>...</td>\n",
              "      <td>24051000.0</td>\n",
              "      <td>177987.0</td>\n",
              "      <td>23288564.0</td>\n",
              "      <td>78115710.0</td>\n",
              "      <td>108537.0</td>\n",
              "      <td>2776568.0</td>\n",
              "      <td>16450310.0</td>\n",
              "      <td>9866476.0</td>\n",
              "      <td>11747072.0</td>\n",
              "      <td>5.941318e+09</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1999</th>\n",
              "      <td>20170844.0</td>\n",
              "      <td>3108778.0</td>\n",
              "      <td>30623406.0</td>\n",
              "      <td>57053.0</td>\n",
              "      <td>64370.0</td>\n",
              "      <td>15866869.0</td>\n",
              "      <td>74674.0</td>\n",
              "      <td>36467218.0</td>\n",
              "      <td>3089022.0</td>\n",
              "      <td>89005.0</td>\n",
              "      <td>...</td>\n",
              "      <td>24311650.0</td>\n",
              "      <td>181265.0</td>\n",
              "      <td>23739841.0</td>\n",
              "      <td>79035871.0</td>\n",
              "      <td>108599.0</td>\n",
              "      <td>2848431.0</td>\n",
              "      <td>16921149.0</td>\n",
              "      <td>10140561.0</td>\n",
              "      <td>11822719.0</td>\n",
              "      <td>6.021685e+09</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2000</th>\n",
              "      <td>20779953.0</td>\n",
              "      <td>3089027.0</td>\n",
              "      <td>31042235.0</td>\n",
              "      <td>57821.0</td>\n",
              "      <td>65390.0</td>\n",
              "      <td>16395473.0</td>\n",
              "      <td>76016.0</td>\n",
              "      <td>36870787.0</td>\n",
              "      <td>3069591.0</td>\n",
              "      <td>90853.0</td>\n",
              "      <td>...</td>\n",
              "      <td>24650400.0</td>\n",
              "      <td>184972.0</td>\n",
              "      <td>24192446.0</td>\n",
              "      <td>79910412.0</td>\n",
              "      <td>108642.0</td>\n",
              "      <td>2922153.0</td>\n",
              "      <td>17409072.0</td>\n",
              "      <td>10415944.0</td>\n",
              "      <td>11881477.0</td>\n",
              "      <td>6.101412e+09</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2001</th>\n",
              "      <td>21606988.0</td>\n",
              "      <td>3060173.0</td>\n",
              "      <td>31451514.0</td>\n",
              "      <td>58494.0</td>\n",
              "      <td>67341.0</td>\n",
              "      <td>16945753.0</td>\n",
              "      <td>77212.0</td>\n",
              "      <td>37275652.0</td>\n",
              "      <td>3050687.0</td>\n",
              "      <td>92898.0</td>\n",
              "      <td>...</td>\n",
              "      <td>24964450.0</td>\n",
              "      <td>189219.0</td>\n",
              "      <td>24646472.0</td>\n",
              "      <td>80742499.0</td>\n",
              "      <td>108549.0</td>\n",
              "      <td>2997784.0</td>\n",
              "      <td>17918373.0</td>\n",
              "      <td>10692193.0</td>\n",
              "      <td>11923914.0</td>\n",
              "      <td>6.180664e+09</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2002</th>\n",
              "      <td>22600770.0</td>\n",
              "      <td>3051010.0</td>\n",
              "      <td>31855109.0</td>\n",
              "      <td>59080.0</td>\n",
              "      <td>70049.0</td>\n",
              "      <td>17519417.0</td>\n",
              "      <td>78295.0</td>\n",
              "      <td>37681749.0</td>\n",
              "      <td>3033978.0</td>\n",
              "      <td>94992.0</td>\n",
              "      <td>...</td>\n",
              "      <td>25271850.0</td>\n",
              "      <td>193920.0</td>\n",
              "      <td>25100408.0</td>\n",
              "      <td>81534407.0</td>\n",
              "      <td>108510.0</td>\n",
              "      <td>3075373.0</td>\n",
              "      <td>18443691.0</td>\n",
              "      <td>10971698.0</td>\n",
              "      <td>11954290.0</td>\n",
              "      <td>6.259680e+09</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2003</th>\n",
              "      <td>23680871.0</td>\n",
              "      <td>3039616.0</td>\n",
              "      <td>32264157.0</td>\n",
              "      <td>59504.0</td>\n",
              "      <td>73182.0</td>\n",
              "      <td>18121479.0</td>\n",
              "      <td>79300.0</td>\n",
              "      <td>38087868.0</td>\n",
              "      <td>3017932.0</td>\n",
              "      <td>97017.0</td>\n",
              "      <td>...</td>\n",
              "      <td>25567650.0</td>\n",
              "      <td>198959.0</td>\n",
              "      <td>25551624.0</td>\n",
              "      <td>82301656.0</td>\n",
              "      <td>108506.0</td>\n",
              "      <td>3154969.0</td>\n",
              "      <td>18985000.0</td>\n",
              "      <td>11256743.0</td>\n",
              "      <td>11982224.0</td>\n",
              "      <td>6.338802e+09</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2004</th>\n",
              "      <td>24726684.0</td>\n",
              "      <td>3026939.0</td>\n",
              "      <td>32692163.0</td>\n",
              "      <td>59681.0</td>\n",
              "      <td>76244.0</td>\n",
              "      <td>18758145.0</td>\n",
              "      <td>80336.0</td>\n",
              "      <td>38491972.0</td>\n",
              "      <td>3000720.0</td>\n",
              "      <td>98737.0</td>\n",
              "      <td>...</td>\n",
              "      <td>25864350.0</td>\n",
              "      <td>204127.0</td>\n",
              "      <td>25996594.0</td>\n",
              "      <td>83062821.0</td>\n",
              "      <td>108467.0</td>\n",
              "      <td>3236626.0</td>\n",
              "      <td>19540098.0</td>\n",
              "      <td>11550642.0</td>\n",
              "      <td>12019912.0</td>\n",
              "      <td>6.418482e+09</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2005</th>\n",
              "      <td>25654277.0</td>\n",
              "      <td>3011487.0</td>\n",
              "      <td>33149724.0</td>\n",
              "      <td>59562.0</td>\n",
              "      <td>78867.0</td>\n",
              "      <td>19433602.0</td>\n",
              "      <td>81465.0</td>\n",
              "      <td>38892931.0</td>\n",
              "      <td>2981269.0</td>\n",
              "      <td>100031.0</td>\n",
              "      <td>...</td>\n",
              "      <td>26167000.0</td>\n",
              "      <td>209282.0</td>\n",
              "      <td>26432447.0</td>\n",
              "      <td>83832661.0</td>\n",
              "      <td>108454.0</td>\n",
              "      <td>3320396.0</td>\n",
              "      <td>20107409.0</td>\n",
              "      <td>11856247.0</td>\n",
              "      <td>12076699.0</td>\n",
              "      <td>6.498698e+09</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2006</th>\n",
              "      <td>26433049.0</td>\n",
              "      <td>2992547.0</td>\n",
              "      <td>33641002.0</td>\n",
              "      <td>59107.0</td>\n",
              "      <td>80993.0</td>\n",
              "      <td>20149901.0</td>\n",
              "      <td>82704.0</td>\n",
              "      <td>39289878.0</td>\n",
              "      <td>2958307.0</td>\n",
              "      <td>100834.0</td>\n",
              "      <td>...</td>\n",
              "      <td>26488250.0</td>\n",
              "      <td>214370.0</td>\n",
              "      <td>26850194.0</td>\n",
              "      <td>84617540.0</td>\n",
              "      <td>108371.0</td>\n",
              "      <td>3406334.0</td>\n",
              "      <td>20687646.0</td>\n",
              "      <td>12173514.0</td>\n",
              "      <td>12155491.0</td>\n",
              "      <td>6.579698e+09</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2007</th>\n",
              "      <td>27100536.0</td>\n",
              "      <td>2970017.0</td>\n",
              "      <td>34166972.0</td>\n",
              "      <td>58365.0</td>\n",
              "      <td>82684.0</td>\n",
              "      <td>20905363.0</td>\n",
              "      <td>84026.0</td>\n",
              "      <td>39684295.0</td>\n",
              "      <td>2932618.0</td>\n",
              "      <td>101222.0</td>\n",
              "      <td>...</td>\n",
              "      <td>26868000.0</td>\n",
              "      <td>219472.0</td>\n",
              "      <td>27247610.0</td>\n",
              "      <td>85419591.0</td>\n",
              "      <td>108339.0</td>\n",
              "      <td>3494496.0</td>\n",
              "      <td>21282515.0</td>\n",
              "      <td>12502958.0</td>\n",
              "      <td>12255922.0</td>\n",
              "      <td>6.661191e+09</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2008</th>\n",
              "      <td>27722276.0</td>\n",
              "      <td>2947314.0</td>\n",
              "      <td>34730608.0</td>\n",
              "      <td>57492.0</td>\n",
              "      <td>83862.0</td>\n",
              "      <td>21695634.0</td>\n",
              "      <td>85397.0</td>\n",
              "      <td>40080160.0</td>\n",
              "      <td>2907618.0</td>\n",
              "      <td>101358.0</td>\n",
              "      <td>...</td>\n",
              "      <td>27302800.0</td>\n",
              "      <td>224704.0</td>\n",
              "      <td>27635832.0</td>\n",
              "      <td>86243413.0</td>\n",
              "      <td>108399.0</td>\n",
              "      <td>3591977.0</td>\n",
              "      <td>21892146.0</td>\n",
              "      <td>12848530.0</td>\n",
              "      <td>12379549.0</td>\n",
              "      <td>6.743929e+09</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2009</th>\n",
              "      <td>28394813.0</td>\n",
              "      <td>2927519.0</td>\n",
              "      <td>35333881.0</td>\n",
              "      <td>56683.0</td>\n",
              "      <td>84463.0</td>\n",
              "      <td>22514281.0</td>\n",
              "      <td>86746.0</td>\n",
              "      <td>40482788.0</td>\n",
              "      <td>2888092.0</td>\n",
              "      <td>101455.0</td>\n",
              "      <td>...</td>\n",
              "      <td>27767400.0</td>\n",
              "      <td>230247.0</td>\n",
              "      <td>28031009.0</td>\n",
              "      <td>87092252.0</td>\n",
              "      <td>108405.0</td>\n",
              "      <td>3689099.0</td>\n",
              "      <td>22516460.0</td>\n",
              "      <td>13215139.0</td>\n",
              "      <td>12526968.0</td>\n",
              "      <td>6.826634e+09</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2010</th>\n",
              "      <td>29185507.0</td>\n",
              "      <td>2913021.0</td>\n",
              "      <td>35977455.0</td>\n",
              "      <td>56079.0</td>\n",
              "      <td>84449.0</td>\n",
              "      <td>23356246.0</td>\n",
              "      <td>88028.0</td>\n",
              "      <td>40788453.0</td>\n",
              "      <td>2877319.0</td>\n",
              "      <td>101669.0</td>\n",
              "      <td>...</td>\n",
              "      <td>28562400.0</td>\n",
              "      <td>236211.0</td>\n",
              "      <td>28439940.0</td>\n",
              "      <td>87967651.0</td>\n",
              "      <td>108358.0</td>\n",
              "      <td>3786161.0</td>\n",
              "      <td>23154855.0</td>\n",
              "      <td>13605984.0</td>\n",
              "      <td>12697723.0</td>\n",
              "      <td>6.908997e+09</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011</th>\n",
              "      <td>30117413.0</td>\n",
              "      <td>2905195.0</td>\n",
              "      <td>36661444.0</td>\n",
              "      <td>55759.0</td>\n",
              "      <td>83747.0</td>\n",
              "      <td>24220661.0</td>\n",
              "      <td>89253.0</td>\n",
              "      <td>41261490.0</td>\n",
              "      <td>2876538.0</td>\n",
              "      <td>102046.0</td>\n",
              "      <td>...</td>\n",
              "      <td>29339400.0</td>\n",
              "      <td>242653.0</td>\n",
              "      <td>28888369.0</td>\n",
              "      <td>88871561.0</td>\n",
              "      <td>108292.0</td>\n",
              "      <td>3882986.0</td>\n",
              "      <td>23807588.0</td>\n",
              "      <td>14023193.0</td>\n",
              "      <td>12894316.0</td>\n",
              "      <td>6.990095e+09</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2012</th>\n",
              "      <td>31161376.0</td>\n",
              "      <td>2900401.0</td>\n",
              "      <td>37383887.0</td>\n",
              "      <td>55667.0</td>\n",
              "      <td>82427.0</td>\n",
              "      <td>25107931.0</td>\n",
              "      <td>90409.0</td>\n",
              "      <td>41733271.0</td>\n",
              "      <td>2884229.0</td>\n",
              "      <td>102560.0</td>\n",
              "      <td>...</td>\n",
              "      <td>29774500.0</td>\n",
              "      <td>249499.0</td>\n",
              "      <td>29362449.0</td>\n",
              "      <td>89802487.0</td>\n",
              "      <td>108191.0</td>\n",
              "      <td>3979998.0</td>\n",
              "      <td>24473178.0</td>\n",
              "      <td>14465121.0</td>\n",
              "      <td>13115131.0</td>\n",
              "      <td>7.069823e+09</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2013</th>\n",
              "      <td>32269589.0</td>\n",
              "      <td>2895092.0</td>\n",
              "      <td>38140132.0</td>\n",
              "      <td>55713.0</td>\n",
              "      <td>80774.0</td>\n",
              "      <td>26015780.0</td>\n",
              "      <td>91516.0</td>\n",
              "      <td>42202935.0</td>\n",
              "      <td>2897584.0</td>\n",
              "      <td>103159.0</td>\n",
              "      <td>...</td>\n",
              "      <td>30243200.0</td>\n",
              "      <td>256635.0</td>\n",
              "      <td>29783571.0</td>\n",
              "      <td>90753472.0</td>\n",
              "      <td>108044.0</td>\n",
              "      <td>4076708.0</td>\n",
              "      <td>25147109.0</td>\n",
              "      <td>14926504.0</td>\n",
              "      <td>13350356.0</td>\n",
              "      <td>7.153755e+09</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2014</th>\n",
              "      <td>33370794.0</td>\n",
              "      <td>2889104.0</td>\n",
              "      <td>38923687.0</td>\n",
              "      <td>55791.0</td>\n",
              "      <td>79213.0</td>\n",
              "      <td>26941779.0</td>\n",
              "      <td>92562.0</td>\n",
              "      <td>42669500.0</td>\n",
              "      <td>2912403.0</td>\n",
              "      <td>103774.0</td>\n",
              "      <td>...</td>\n",
              "      <td>30757700.0</td>\n",
              "      <td>263888.0</td>\n",
              "      <td>30045134.0</td>\n",
              "      <td>91714595.0</td>\n",
              "      <td>107884.0</td>\n",
              "      <td>4173398.0</td>\n",
              "      <td>25823485.0</td>\n",
              "      <td>15399753.0</td>\n",
              "      <td>13586681.0</td>\n",
              "      <td>7.238449e+09</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2015</th>\n",
              "      <td>34413603.0</td>\n",
              "      <td>2880703.0</td>\n",
              "      <td>39728025.0</td>\n",
              "      <td>55812.0</td>\n",
              "      <td>78011.0</td>\n",
              "      <td>27884381.0</td>\n",
              "      <td>93566.0</td>\n",
              "      <td>43131966.0</td>\n",
              "      <td>2925553.0</td>\n",
              "      <td>104341.0</td>\n",
              "      <td>...</td>\n",
              "      <td>31298900.0</td>\n",
              "      <td>271130.0</td>\n",
              "      <td>30081829.0</td>\n",
              "      <td>92677076.0</td>\n",
              "      <td>107710.0</td>\n",
              "      <td>4270092.0</td>\n",
              "      <td>26497889.0</td>\n",
              "      <td>15879361.0</td>\n",
              "      <td>13814629.0</td>\n",
              "      <td>7.323322e+09</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2016</th>\n",
              "      <td>35383128.0</td>\n",
              "      <td>2876101.0</td>\n",
              "      <td>40551404.0</td>\n",
              "      <td>55741.0</td>\n",
              "      <td>77297.0</td>\n",
              "      <td>28842484.0</td>\n",
              "      <td>94527.0</td>\n",
              "      <td>43590368.0</td>\n",
              "      <td>2936146.0</td>\n",
              "      <td>104872.0</td>\n",
              "      <td>...</td>\n",
              "      <td>31847900.0</td>\n",
              "      <td>278330.0</td>\n",
              "      <td>29846179.0</td>\n",
              "      <td>93638724.0</td>\n",
              "      <td>107510.0</td>\n",
              "      <td>4367088.0</td>\n",
              "      <td>27168210.0</td>\n",
              "      <td>16363507.0</td>\n",
              "      <td>14030390.0</td>\n",
              "      <td>7.408876e+09</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2017</th>\n",
              "      <td>36296400.0</td>\n",
              "      <td>2873457.0</td>\n",
              "      <td>41389198.0</td>\n",
              "      <td>55620.0</td>\n",
              "      <td>77001.0</td>\n",
              "      <td>29816748.0</td>\n",
              "      <td>95426.0</td>\n",
              "      <td>44044811.0</td>\n",
              "      <td>2944809.0</td>\n",
              "      <td>105366.0</td>\n",
              "      <td>...</td>\n",
              "      <td>32388600.0</td>\n",
              "      <td>285510.0</td>\n",
              "      <td>29390409.0</td>\n",
              "      <td>94596642.0</td>\n",
              "      <td>107268.0</td>\n",
              "      <td>4454805.0</td>\n",
              "      <td>27834821.0</td>\n",
              "      <td>16853688.0</td>\n",
              "      <td>14236745.0</td>\n",
              "      <td>7.493762e+09</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>28 rows Ã 220 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-885b0f1e-8c66-4e09-bee8-28a1b295adbe')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-885b0f1e-8c66-4e09-bee8-28a1b295adbe button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-885b0f1e-8c66-4e09-bee8-28a1b295adbe');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 104
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "We also need to cut the datasset so that it wont go past 2017"
      ],
      "metadata": {
        "id": "62kUSXrt7Oat"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "crop_yield_pivot.drop(crop_yield_pivot.tail(2022-2017).index,inplace=True)"
      ],
      "metadata": {
        "id": "lq0o-2p_7Rwr"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "crop_yield_pivot.tail()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 267
        },
        "id": "MlgMDqOq7niP",
        "outputId": "15af67fa-3adb-4ff4-f1ca-d6128f0f7b7f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "COUNTRY       ARG        AUS        BRA       BRICS      CAN      CHE  \\\n",
              "TIME                                                                    \n",
              "2013     10263.18  26121.983  14008.496  534135.382  37589.1  476.280   \n",
              "2014     15004.40  24432.950  13777.588  550033.553  29442.1  546.621   \n",
              "2015     12360.80  22548.202  13999.948  547263.809  27647.4  523.409   \n",
              "2016     19352.00  32626.048  13936.840  570134.387  32139.9  382.936   \n",
              "2017     19404.40  21576.246  12646.404  592457.165  30377.3  524.923   \n",
              "\n",
              "COUNTRY       CHL         CHN       COL        EGY  ...        RUS     SAU  \\\n",
              "TIME                                                ...                      \n",
              "2013     1445.822  265015.661  1407.349  14546.344  ...  53074.624  660.15   \n",
              "2014     1572.788  272403.250  1276.983  14228.636  ...  60761.714  718.53   \n",
              "2015     1841.976  277956.212  1432.219  14360.171  ...  62921.248   10.00   \n",
              "2016     1466.108  277870.551  1821.902  14757.965  ...  74426.565   10.00   \n",
              "2017     1555.054  280016.994  1845.123  13169.097  ...  86989.161   10.00   \n",
              "\n",
              "COUNTRY        THA      TUR        UKR        USA        VNM          WLD  \\\n",
              "TIME                                                                        \n",
              "2013     24338.444  22590.0  22376.082  64104.467  28625.350  1205703.579   \n",
              "2014     20931.454  19498.0  24147.920  62154.478  29233.490  1224264.250   \n",
              "2015     18154.364  23152.0  26573.788  62215.566  29309.150  1225299.115   \n",
              "2016     21090.334  21152.0  26142.222  69916.590  28057.315  1260722.897   \n",
              "2017     21780.316  22040.0  26201.621  52981.621  27780.285  1261007.434   \n",
              "\n",
              "COUNTRY       ZAF  Yearly Total  \n",
              "TIME                             \n",
              "2013     1881.001   2676680.513  \n",
              "2014     1761.001   2723778.060  \n",
              "2015     1451.001   2718272.278  \n",
              "2016     1912.001   2831035.180  \n",
              "2017     1537.001   2847278.627  \n",
              "\n",
              "[5 rows x 38 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-8a82a95d-998c-41fa-9f6b-099d39ccd7ef\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th>COUNTRY</th>\n",
              "      <th>ARG</th>\n",
              "      <th>AUS</th>\n",
              "      <th>BRA</th>\n",
              "      <th>BRICS</th>\n",
              "      <th>CAN</th>\n",
              "      <th>CHE</th>\n",
              "      <th>CHL</th>\n",
              "      <th>CHN</th>\n",
              "      <th>COL</th>\n",
              "      <th>EGY</th>\n",
              "      <th>...</th>\n",
              "      <th>RUS</th>\n",
              "      <th>SAU</th>\n",
              "      <th>THA</th>\n",
              "      <th>TUR</th>\n",
              "      <th>UKR</th>\n",
              "      <th>USA</th>\n",
              "      <th>VNM</th>\n",
              "      <th>WLD</th>\n",
              "      <th>ZAF</th>\n",
              "      <th>Yearly Total</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>TIME</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2013</th>\n",
              "      <td>10263.18</td>\n",
              "      <td>26121.983</td>\n",
              "      <td>14008.496</td>\n",
              "      <td>534135.382</td>\n",
              "      <td>37589.1</td>\n",
              "      <td>476.280</td>\n",
              "      <td>1445.822</td>\n",
              "      <td>265015.661</td>\n",
              "      <td>1407.349</td>\n",
              "      <td>14546.344</td>\n",
              "      <td>...</td>\n",
              "      <td>53074.624</td>\n",
              "      <td>660.15</td>\n",
              "      <td>24338.444</td>\n",
              "      <td>22590.0</td>\n",
              "      <td>22376.082</td>\n",
              "      <td>64104.467</td>\n",
              "      <td>28625.350</td>\n",
              "      <td>1205703.579</td>\n",
              "      <td>1881.001</td>\n",
              "      <td>2676680.513</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2014</th>\n",
              "      <td>15004.40</td>\n",
              "      <td>24432.950</td>\n",
              "      <td>13777.588</td>\n",
              "      <td>550033.553</td>\n",
              "      <td>29442.1</td>\n",
              "      <td>546.621</td>\n",
              "      <td>1572.788</td>\n",
              "      <td>272403.250</td>\n",
              "      <td>1276.983</td>\n",
              "      <td>14228.636</td>\n",
              "      <td>...</td>\n",
              "      <td>60761.714</td>\n",
              "      <td>718.53</td>\n",
              "      <td>20931.454</td>\n",
              "      <td>19498.0</td>\n",
              "      <td>24147.920</td>\n",
              "      <td>62154.478</td>\n",
              "      <td>29233.490</td>\n",
              "      <td>1224264.250</td>\n",
              "      <td>1761.001</td>\n",
              "      <td>2723778.060</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2015</th>\n",
              "      <td>12360.80</td>\n",
              "      <td>22548.202</td>\n",
              "      <td>13999.948</td>\n",
              "      <td>547263.809</td>\n",
              "      <td>27647.4</td>\n",
              "      <td>523.409</td>\n",
              "      <td>1841.976</td>\n",
              "      <td>277956.212</td>\n",
              "      <td>1432.219</td>\n",
              "      <td>14360.171</td>\n",
              "      <td>...</td>\n",
              "      <td>62921.248</td>\n",
              "      <td>10.00</td>\n",
              "      <td>18154.364</td>\n",
              "      <td>23152.0</td>\n",
              "      <td>26573.788</td>\n",
              "      <td>62215.566</td>\n",
              "      <td>29309.150</td>\n",
              "      <td>1225299.115</td>\n",
              "      <td>1451.001</td>\n",
              "      <td>2718272.278</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2016</th>\n",
              "      <td>19352.00</td>\n",
              "      <td>32626.048</td>\n",
              "      <td>13936.840</td>\n",
              "      <td>570134.387</td>\n",
              "      <td>32139.9</td>\n",
              "      <td>382.936</td>\n",
              "      <td>1466.108</td>\n",
              "      <td>277870.551</td>\n",
              "      <td>1821.902</td>\n",
              "      <td>14757.965</td>\n",
              "      <td>...</td>\n",
              "      <td>74426.565</td>\n",
              "      <td>10.00</td>\n",
              "      <td>21090.334</td>\n",
              "      <td>21152.0</td>\n",
              "      <td>26142.222</td>\n",
              "      <td>69916.590</td>\n",
              "      <td>28057.315</td>\n",
              "      <td>1260722.897</td>\n",
              "      <td>1912.001</td>\n",
              "      <td>2831035.180</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2017</th>\n",
              "      <td>19404.40</td>\n",
              "      <td>21576.246</td>\n",
              "      <td>12646.404</td>\n",
              "      <td>592457.165</td>\n",
              "      <td>30377.3</td>\n",
              "      <td>524.923</td>\n",
              "      <td>1555.054</td>\n",
              "      <td>280016.994</td>\n",
              "      <td>1845.123</td>\n",
              "      <td>13169.097</td>\n",
              "      <td>...</td>\n",
              "      <td>86989.161</td>\n",
              "      <td>10.00</td>\n",
              "      <td>21780.316</td>\n",
              "      <td>22040.0</td>\n",
              "      <td>26201.621</td>\n",
              "      <td>52981.621</td>\n",
              "      <td>27780.285</td>\n",
              "      <td>1261007.434</td>\n",
              "      <td>1537.001</td>\n",
              "      <td>2847278.627</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows Ã 38 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8a82a95d-998c-41fa-9f6b-099d39ccd7ef')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-8a82a95d-998c-41fa-9f6b-099d39ccd7ef button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-8a82a95d-998c-41fa-9f6b-099d39ccd7ef');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 106
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "len(crop_yield_pivot)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Q-Rio5eb7pvX",
        "outputId": "ce0cae55-e0bf-43a6-ab7c-dc18c0055434"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "28"
            ]
          },
          "metadata": {},
          "execution_count": 107
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "len(world_pop_drop)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "yyi-mnk-7rON",
        "outputId": "afe45f09-d5e6-434e-8736-88dc671fe6cf"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "28"
            ]
          },
          "metadata": {},
          "execution_count": 108
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "r, p_value = pearsonr(world_pop_drop[\"Total Population\"] , crop_yield_pivot[\"Yearly Total\"])\n",
        "print('Correlation: {}'.format(r))\n",
        "print('P value: {}'.format(p_value))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "i9MKJR-17uXl",
        "outputId": "44aad87b-3933-4b4c-c3ab-aa1af83a24be"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Correlation: 0.9357714157130247\n",
            "P value: 2.7957807052136084e-13\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "This has an even STRONGER correlation than the one comparing global temperature to crop production.\n",
        "\n",
        "Along with that, we have a clear explaination for why its correlated. Rising population means we have to produce more food, so more crops need to be grown.\n",
        "\n",
        "We can do another investigation to see if the rising temperature is causing TWO things, or a form of reverse multiple causation. In this case, increase in population is causing two things, increase in temperature and increase in crop production.\n"
      ],
      "metadata": {
        "id": "HKABLnRC70y8"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "On the basis of there being a bettter explaination for how population impacts food production, along with stronger correlation values, **I hearby reject the hypothesis that global food production is directly impacted by the rising global climate.**\n",
        "\n",
        "**I believe that the rising population is impacting both food production and the climate, as there is a correlation between these things as proven by this investigation.**"
      ],
      "metadata": {
        "id": "QmHUWeDs8Nwe"
      }
    }
  ]
}